{"ast":null,"code":"/**\n * Normalise an SVG path to absolute coordinates\n * and full commands, rather than relative coordinates\n * and/or shortcut commands.\n */\nfunction normalizePath(d) {\n  // preprocess \"d\" so that we have spaces between values\n  d = d.replace(/,/g, \" \") // replace commas with spaces\n  .replace(/-/g, \" - \") // add spacing around minus signs\n  .replace(/-\\s+/g, \"-\") // remove spacing to the right of minus signs.\n  .replace(/([a-zA-Z])/g, \" $1 \"); // set up the variables used in this function\n\n  var instructions = d.replace(/([a-zA-Z])\\s?/g, \"|$1\").split(\"|\"),\n      instructionLength = instructions.length,\n      i,\n      instruction,\n      op,\n      lop,\n      args = [],\n      alen,\n      a,\n      sx = 0,\n      sy = 0,\n      x = 0,\n      y = 0,\n      cx = 0,\n      cy = 0,\n      cx2 = 0,\n      cy2 = 0,\n      normalized = \"\"; // we run through the instruction list starting at 1, not 0,\n  // because we split up \"|M x y ....\" so the first element will\n  // always be an empty string. By design.\n\n  for (i = 1; i < instructionLength; i++) {\n    // which instruction is this?\n    instruction = instructions[i];\n    op = instruction.substring(0, 1);\n    lop = op.toLowerCase(); // what are the arguments? note that we need to convert\n    // all strings into numbers, or + will do silly things.\n\n    args = instruction.replace(op, \"\").trim().split(\" \");\n    args = args.filter(function (v) {\n      return v !== \"\";\n    }).map(parseFloat);\n    alen = args.length; // we could use a switch, but elaborate code in a \"case\" with\n    // fallthrough is just horrid to read. So let's use ifthen\n    // statements instead.\n    // moveto command (plus possible lineto)\n\n    if (lop === \"m\") {\n      normalized += \"M \";\n\n      if (op === \"m\") {\n        x += args[0];\n        y += args[1];\n      } else {\n        x = args[0];\n        y = args[1];\n      } // records start position, for dealing\n      // with the shape close operator ('Z')\n\n\n      sx = x;\n      sy = y;\n      normalized += x + \" \" + y + \" \";\n\n      if (alen > 2) {\n        for (a = 0; a < alen; a += 2) {\n          if (op === \"m\") {\n            x += args[a];\n            y += args[a + 1];\n          } else {\n            x = args[a];\n            y = args[a + 1];\n          }\n\n          normalized += [\"L\", x, y, ''].join(\" \");\n        }\n      }\n    } else if (lop === \"l\") {\n      // lineto commands\n      for (a = 0; a < alen; a += 2) {\n        if (op === \"l\") {\n          x += args[a];\n          y += args[a + 1];\n        } else {\n          x = args[a];\n          y = args[a + 1];\n        }\n\n        normalized += [\"L\", x, y, ''].join(\" \");\n      }\n    } else if (lop === \"h\") {\n      for (a = 0; a < alen; a++) {\n        if (op === \"h\") {\n          x += args[a];\n        } else {\n          x = args[a];\n        }\n\n        normalized += [\"L\", x, y, ''].join(\" \");\n      }\n    } else if (lop === \"v\") {\n      for (a = 0; a < alen; a++) {\n        if (op === \"v\") {\n          y += args[a];\n        } else {\n          y = args[a];\n        }\n\n        normalized += [\"L\", x, y, ''].join(\" \");\n      }\n    } else if (lop === \"q\") {\n      // quadratic curveto commands\n      for (a = 0; a < alen; a += 4) {\n        if (op === \"q\") {\n          cx = x + args[a];\n          cy = y + args[a + 1];\n          x += args[a + 2];\n          y += args[a + 3];\n        } else {\n          cx = args[a];\n          cy = args[a + 1];\n          x = args[a + 2];\n          y = args[a + 3];\n        }\n\n        normalized += [\"Q\", cx, cy, x, y, ''].join(\" \");\n      }\n    } else if (lop === \"t\") {\n      for (a = 0; a < alen; a += 2) {\n        // reflect previous cx/cy over x/y\n        cx = x + (x - cx);\n        cy = y + (y - cy); // then get real end point\n\n        if (op === \"t\") {\n          x += args[a];\n          y += args[a + 1];\n        } else {\n          x = args[a];\n          y = args[a + 1];\n        }\n\n        normalized += [\"Q\", cx, cy, x, y, ''].join(\" \");\n      }\n    } else if (lop === \"c\") {\n      // cubic curveto commands\n      for (a = 0; a < alen; a += 6) {\n        if (op === \"c\") {\n          cx = x + args[a];\n          cy = y + args[a + 1];\n          cx2 = x + args[a + 2];\n          cy2 = y + args[a + 3];\n          x += args[a + 4];\n          y += args[a + 5];\n        } else {\n          cx = args[a];\n          cy = args[a + 1];\n          cx2 = args[a + 2];\n          cy2 = args[a + 3];\n          x = args[a + 4];\n          y = args[a + 5];\n        }\n\n        normalized += [\"C\", cx, cy, cx2, cy2, x, y, ''].join(\" \");\n      }\n    } else if (lop === \"s\") {\n      for (a = 0; a < alen; a += 4) {\n        // reflect previous cx2/cy2 over x/y\n        cx = x + (x - cx2);\n        cy = y + (y - cy2); // then get real control and end point\n\n        if (op === \"s\") {\n          cx2 = x + args[a];\n          cy2 = y + args[a + 1];\n          x += args[a + 2];\n          y += args[a + 3];\n        } else {\n          cx2 = args[a];\n          cy2 = args[a + 1];\n          x = args[a + 2];\n          y = args[a + 3];\n        }\n\n        normalized += [\"C\", cx, cy, cx2, cy2, x, y, ''].join(\" \");\n      }\n    } else if (lop === \"z\") {\n      normalized += \"Z \"; // not unimportant: path closing changes the current x/y coordinate\n\n      x = sx;\n      y = sy;\n    }\n  }\n\n  return normalized.trim();\n}\n\nmodule.exports = normalizePath;","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/node_modules/bezier-js/lib/normalise-svg.js"],"names":["normalizePath","d","replace","instructions","split","instructionLength","length","i","instruction","op","lop","args","alen","a","sx","sy","x","y","cx","cy","cx2","cy2","normalized","substring","toLowerCase","trim","filter","v","map","parseFloat","join","module","exports"],"mappings":"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","sourcesContent":["/**\n * Normalise an SVG path to absolute coordinates\n * and full commands, rather than relative coordinates\n * and/or shortcut commands.\n */\nfunction normalizePath(d) {\n  // preprocess \"d\" so that we have spaces between values\n  d = d\n    .replace(/,/g, \" \") // replace commas with spaces\n    .replace(/-/g, \" - \") // add spacing around minus signs\n    .replace(/-\\s+/g, \"-\") // remove spacing to the right of minus signs.\n    .replace(/([a-zA-Z])/g, \" $1 \");\n\n  // set up the variables used in this function\n  var instructions = d.replace(/([a-zA-Z])\\s?/g, \"|$1\").split(\"|\"),\n    instructionLength = instructions.length,\n    i,\n    instruction,\n    op,\n    lop,\n    args = [],\n    alen,\n    a,\n    sx = 0,\n    sy = 0,\n    x = 0,\n    y = 0,\n    cx = 0,\n    cy = 0,\n    cx2 = 0,\n    cy2 = 0,\n    normalized = \"\";\n\n  // we run through the instruction list starting at 1, not 0,\n  // because we split up \"|M x y ....\" so the first element will\n  // always be an empty string. By design.\n  for (i = 1; i < instructionLength; i++) {\n    // which instruction is this?\n    instruction = instructions[i];\n    op = instruction.substring(0, 1);\n    lop = op.toLowerCase();\n\n    // what are the arguments? note that we need to convert\n    // all strings into numbers, or + will do silly things.\n    args = instruction\n      .replace(op, \"\")\n      .trim()\n      .split(\" \");\n    args = args\n      .filter(function(v) {\n        return v !== \"\";\n      })\n      .map(parseFloat);\n    alen = args.length;\n\n    // we could use a switch, but elaborate code in a \"case\" with\n    // fallthrough is just horrid to read. So let's use ifthen\n    // statements instead.\n\n    // moveto command (plus possible lineto)\n    if (lop === \"m\") {\n      normalized += \"M \";\n      if (op === \"m\") {\n        x += args[0];\n        y += args[1];\n      } else {\n        x = args[0];\n        y = args[1];\n      }\n      // records start position, for dealing\n      // with the shape close operator ('Z')\n      sx = x;\n      sy = y;\n      normalized += x + \" \" + y + \" \";\n      if (alen > 2) {\n        for (a = 0; a < alen; a += 2) {\n          if (op === \"m\") {\n            x += args[a];\n            y += args[a + 1];\n          } else {\n            x = args[a];\n            y = args[a + 1];\n          }\n          normalized += [\"L\",x,y,''].join(\" \");\n        }\n      }\n    } else if (lop === \"l\") {\n      // lineto commands\n      for (a = 0; a < alen; a += 2) {\n        if (op === \"l\") {\n          x += args[a];\n          y += args[a + 1];\n        } else {\n          x = args[a];\n          y = args[a + 1];\n        }\n        normalized += [\"L\",x,y,''].join(\" \");\n      }\n    } else if (lop === \"h\") {\n      for (a = 0; a < alen; a++) {\n        if (op === \"h\") {\n          x += args[a];\n        } else {\n          x = args[a];\n        }\n        normalized += [\"L\",x,y,''].join(\" \");\n      }\n    } else if (lop === \"v\") {\n      for (a = 0; a < alen; a++) {\n        if (op === \"v\") {\n          y += args[a];\n        } else {\n          y = args[a];\n        }\n        normalized += [\"L\",x,y,''].join(\" \");\n      }\n    } else if (lop === \"q\") {\n      // quadratic curveto commands\n      for (a = 0; a < alen; a += 4) {\n        if (op === \"q\") {\n          cx = x + args[a];\n          cy = y + args[a + 1];\n          x += args[a + 2];\n          y += args[a + 3];\n        } else {\n          cx = args[a];\n          cy = args[a + 1];\n          x = args[a + 2];\n          y = args[a + 3];\n        }\n        normalized += [\"Q\",cx,cy,x,y,''].join(\" \");\n      }\n    } else if (lop === \"t\") {\n      for (a = 0; a < alen; a += 2) {\n        // reflect previous cx/cy over x/y\n        cx = x + (x - cx);\n        cy = y + (y - cy);\n        // then get real end point\n        if (op === \"t\") {\n          x += args[a];\n          y += args[a + 1];\n        } else {\n          x = args[a];\n          y = args[a + 1];\n        }\n        normalized += [\"Q\",cx,cy,x,y,''].join(\" \");\n      }\n    } else if (lop === \"c\") {\n      // cubic curveto commands\n      for (a = 0; a < alen; a += 6) {\n        if (op === \"c\") {\n          cx = x + args[a];\n          cy = y + args[a + 1];\n          cx2 = x + args[a + 2];\n          cy2 = y + args[a + 3];\n          x += args[a + 4];\n          y += args[a + 5];\n        } else {\n          cx = args[a];\n          cy = args[a + 1];\n          cx2 = args[a + 2];\n          cy2 = args[a + 3];\n          x = args[a + 4];\n          y = args[a + 5];\n        }\n        normalized += [\"C\",cx,cy,cx2,cy2,x,y,''].join(\" \");\n      }\n    } else if (lop === \"s\") {\n      for (a = 0; a < alen; a += 4) {\n        // reflect previous cx2/cy2 over x/y\n        cx = x + (x - cx2);\n        cy = y + (y - cy2);\n        // then get real control and end point\n        if (op === \"s\") {\n          cx2 = x + args[a];\n          cy2 = y + args[a + 1];\n          x += args[a + 2];\n          y += args[a + 3];\n        } else {\n          cx2 = args[a];\n          cy2 = args[a + 1];\n          x = args[a + 2];\n          y = args[a + 3];\n        }\n        normalized +=[\"C\",cx,cy,cx2,cy2,x,y,''].join(\" \");\n      }\n    } else if (lop === \"z\") {\n      normalized += \"Z \";\n      // not unimportant: path closing changes the current x/y coordinate\n      x = sx;\n      y = sy;\n    }\n  }\n  return normalized.trim();\n}\n\nmodule.exports = normalizePath;\n"]},"metadata":{},"sourceType":"script"}