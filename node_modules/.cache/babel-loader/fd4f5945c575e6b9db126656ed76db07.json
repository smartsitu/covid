{"ast":null,"code":"var _jsxFileName = \"/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/updates.js\";\nimport axios from 'axios';\nimport { formatDistance, format } from 'date-fns';\nimport React, { useState, useLayoutEffect } from 'react';\nimport { useEffectOnce } from 'react-use';\nconst newDate = new Date();\nlet currentDate = newDate;\n\nfunction Updates(props) {\n  const [updates, setUpdates] = useState([]);\n  useEffectOnce(() => {\n    axios.get('https://api.covid19india.org/updatelog/log.json').then(response => {\n      setUpdates(response.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }); // reset the currentDate after rendering is complete\n  // in case the currentDate was changed during addHeader\n\n  useLayoutEffect(() => {\n    currentDate = newDate;\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"updates\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"updates-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, format(currentDate, 'd MMM'))), updates.slice(-5).reverse().map(function (activity, index) {\n    activity.update = activity.update.replace('\\n', '<br/>');\n    const activityDate = new Date(activity.timestamp * 1000);\n\n    const addHeader = () => {\n      currentDate = activityDate;\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }\n      }, index === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"update\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, \"No updates yet!\")) : '', /*#__PURE__*/React.createElement(\"div\", {\n        className: \"updates-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }\n      }, format(activityDate, 'd MMM'))));\n    };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, activityDate.getDate() !== currentDate.getDate() ? addHeader() : ' ', /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"update\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, formatDistance(new Date(activity.timestamp * 1000), new Date()) + ' ago'), /*#__PURE__*/React.createElement(\"h4\", {\n      dangerouslySetInnerHTML: {\n        __html: activity.update\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    })));\n  }));\n}\n\nexport default Updates;","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/updates.js"],"names":["axios","formatDistance","format","React","useState","useLayoutEffect","useEffectOnce","newDate","Date","currentDate","Updates","props","updates","setUpdates","get","then","response","data","catch","err","console","log","slice","reverse","map","activity","index","update","replace","activityDate","timestamp","addHeader","getDate","__html"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {formatDistance, format} from 'date-fns';\nimport React, {useState, useLayoutEffect} from 'react';\nimport {useEffectOnce} from 'react-use';\n\nconst newDate = new Date();\nlet currentDate = newDate;\n\nfunction Updates(props) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffectOnce(() => {\n    axios\n      .get('https://api.covid19india.org/updatelog/log.json')\n      .then((response) => {\n        setUpdates(response.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  });\n\n  // reset the currentDate after rendering is complete\n  // in case the currentDate was changed during addHeader\n  useLayoutEffect(() => {\n    currentDate = newDate;\n  });\n\n  return (\n    <div className=\"updates\">\n      <div className=\"updates-header\">\n        <h2>{format(currentDate, 'd MMM')}</h2>\n      </div>\n\n      {updates\n        .slice(-5)\n        .reverse()\n        .map(function (activity, index) {\n          activity.update = activity.update.replace('\\n', '<br/>');\n          const activityDate = new Date(activity.timestamp * 1000);\n          const addHeader = () => {\n            currentDate = activityDate;\n\n            return (\n              <React.Fragment>\n                {index === 0 ? (\n                  <div className=\"update\">\n                    <h4>No updates yet!</h4>\n                  </div>\n                ) : (\n                  ''\n                )}\n                <div className=\"updates-header\">\n                  <h2>{format(activityDate, 'd MMM')}</h2>\n                </div>\n              </React.Fragment>\n            );\n          };\n\n          return (\n            <React.Fragment key={index}>\n              {activityDate.getDate() !== currentDate.getDate()\n                ? addHeader()\n                : ' '}\n              <div key={index} className=\"update\">\n                <h5>\n                  {formatDistance(\n                    new Date(activity.timestamp * 1000),\n                    new Date()\n                  ) + ' ago'}\n                </h5>\n                <h4\n                  dangerouslySetInnerHTML={{\n                    __html: activity.update,\n                  }}\n                ></h4>\n              </div>\n            </React.Fragment>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default Updates;\n"]},"metadata":{},"sourceType":"module"}