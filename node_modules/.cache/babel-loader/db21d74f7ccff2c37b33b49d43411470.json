{"ast":null,"code":"var _jsxFileName = \"/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/clusters.js\";\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport React, { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nconst isEqual = () => {\n  return true;\n};\n\nfunction Clusters({\n  stateCode\n}) {\n  const [fetched, setFetched] = useState(false);\n  const [stateRawData, setStateRawData] = useState([]);\n  const [networkData, setNetworkData] = useState([]);\n\n  function prepareNetworkData(data) {\n    // Parse data\n    let contractedStr = data.reduce((acc, v) => acc + v.contractedfromwhichpatientsuspected + ', ', '');\n    contractedStr = contractedStr.replace(/\\s+/g, '');\n    const sources = new Set(contractedStr.match(/[^,]+/g)); // Prepare nodes and links\n\n    const nodes = [];\n    const nodesSet = new Set();\n    const links = [];\n    data.forEach(d => {\n      const contractedStr = d.contractedfromwhichpatientsuspected.replace(/\\s+/g, '');\n      const contracted = contractedStr.match(/[^,]+/g);\n\n      if (contracted) {\n        const pid = 'P' + d.patientnumber;\n        nodesSet.add(pid);\n        nodes.push({\n          id: pid,\n          group: sources.has(pid) ? 'source' : 'target',\n          raw: d\n        });\n        contracted.forEach(p => {\n          links.push({\n            source: p,\n            target: pid\n          });\n        });\n      }\n    }); // Add missing nodes\n\n    links.forEach(d => {\n      if (!nodesSet.has(d.source)) {\n        nodes.push({\n          id: d.source,\n          group: 'source',\n          raw: d.source\n        });\n        nodesSet.add(d.source);\n      }\n    });\n    return {\n      nodes: nodes,\n      links: links\n    };\n  }\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const rawDataResponse = await axios.get('https://api.covid19india.org/raw_data.json');\n        setStateRawData(rawDataResponse.data.raw_data.filter(d => d.statecode === stateCode));\n        setFetched(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    if (!fetched) {\n      getData();\n    }\n  }, [fetched, stateCode]);\n  useEffect(() => {\n    setNetworkData(prepareNetworkData(stateRawData));\n  }, [stateRawData]);\n\n  const NetworkGraph = () => {\n    const fgRef = useRef();\n    useEffect(() => {\n      const fg = fgRef.current;\n      const width = document.getElementById('clusters').offsetWidth;\n      const height = width; // Deactivate existing forces\n\n      fg.d3Force('charge').strength(-60);\n      fg.d3Force('collision', d3.forceCollide());\n      fg.d3Force('x', d3.forceX().strength(0.3));\n      fg.d3Force('y', d3.forceY().strength(0.3));\n      fg.d3Force('box', boxForce); // Custom force to keep everything inside box\n\n      function boxForce() {\n        for (let i = 0, n = networkData.nodes.length; i < n; ++i) {\n          const currNode = networkData.nodes[i];\n          currNode.x = Math.max(-width, Math.min(width, currNode.x));\n          currNode.y = Math.max(-height, Math.min(height, currNode.y));\n        }\n      }\n    }, []);\n    const width = document.getElementById('clusters').offsetWidth;\n    const height = width;\n    return /*#__PURE__*/React.createElement(ForceGraph2D, {\n      ref: fgRef,\n      width: width,\n      height: height,\n      graphData: networkData,\n      nodeLabel: \"id\",\n      nodeColor: node => node.group === 'source' ? '#dc3545' : 'gray',\n      linkDirectionalParticleColor: () => 'red',\n      linkDirectionalParticles: 1,\n      linkDirectionalParticleWidth: link => link.source.id[0] === 'P' ? 2 : 0,\n      enableZoomPanInteraction: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    });\n  };\n\n  useEffect(() => {\n    ReactDOM.render( /*#__PURE__*/React.createElement(NetworkGraph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }), document.getElementById('clusters'));\n  }, [networkData]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"clusters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 10\n    }\n  });\n}\n\nexport default React.memo(Clusters, isEqual);","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/clusters.js"],"names":["axios","d3","React","useEffect","useRef","useState","ReactDOM","ForceGraph2D","isEqual","Clusters","stateCode","fetched","setFetched","stateRawData","setStateRawData","networkData","setNetworkData","prepareNetworkData","data","contractedStr","reduce","acc","v","contractedfromwhichpatientsuspected","replace","sources","Set","match","nodes","nodesSet","links","forEach","d","contracted","pid","patientnumber","add","push","id","group","has","raw","p","source","target","getData","rawDataResponse","get","raw_data","filter","statecode","err","console","log","NetworkGraph","fgRef","fg","current","width","document","getElementById","offsetWidth","height","d3Force","strength","forceCollide","forceX","forceY","boxForce","i","n","length","currNode","x","Math","max","min","y","node","link","render","memo"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nconst isEqual = () => {\n  return true;\n};\n\nfunction Clusters({stateCode}) {\n  const [fetched, setFetched] = useState(false);\n  const [stateRawData, setStateRawData] = useState([]);\n  const [networkData, setNetworkData] = useState([]);\n\n  function prepareNetworkData(data) {\n    // Parse data\n    let contractedStr = data.reduce(\n      (acc, v) => acc + v.contractedfromwhichpatientsuspected + ', ',\n      ''\n    );\n    contractedStr = contractedStr.replace(/\\s+/g, '');\n    const sources = new Set(contractedStr.match(/[^,]+/g));\n\n    // Prepare nodes and links\n    const nodes = [];\n    const nodesSet = new Set();\n    const links = [];\n    data.forEach((d) => {\n      const contractedStr = d.contractedfromwhichpatientsuspected.replace(\n        /\\s+/g,\n        ''\n      );\n      const contracted = contractedStr.match(/[^,]+/g);\n      if (contracted) {\n        const pid = 'P' + d.patientnumber;\n        nodesSet.add(pid);\n        nodes.push({\n          id: pid,\n          group: sources.has(pid) ? 'source' : 'target',\n          raw: d,\n        });\n        contracted.forEach((p) => {\n          links.push({\n            source: p,\n            target: pid,\n          });\n        });\n      }\n    });\n\n    // Add missing nodes\n    links.forEach((d) => {\n      if (!nodesSet.has(d.source)) {\n        nodes.push({\n          id: d.source,\n          group: 'source',\n          raw: d.source,\n        });\n        nodesSet.add(d.source);\n      }\n    });\n    return {\n      nodes: nodes,\n      links: links,\n    };\n  }\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const rawDataResponse = await axios.get(\n          'https://api.covid19india.org/raw_data.json'\n        );\n        setStateRawData(\n          rawDataResponse.data.raw_data.filter((d) => d.statecode === stateCode)\n        );\n        setFetched(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    if (!fetched) {\n      getData();\n    }\n  }, [fetched, stateCode]);\n\n  useEffect(() => {\n    setNetworkData(prepareNetworkData(stateRawData));\n  }, [stateRawData]);\n\n  const NetworkGraph = () => {\n    const fgRef = useRef();\n\n    useEffect(() => {\n      const fg = fgRef.current;\n      const width = document.getElementById('clusters').offsetWidth;\n      const height = width;\n      // Deactivate existing forces\n      fg.d3Force('charge').strength(-60);\n      fg.d3Force('collision', d3.forceCollide());\n      fg.d3Force('x', d3.forceX().strength(0.3));\n      fg.d3Force('y', d3.forceY().strength(0.3));\n      fg.d3Force('box', boxForce);\n\n      // Custom force to keep everything inside box\n      function boxForce() {\n        for (let i = 0, n = networkData.nodes.length; i < n; ++i) {\n          const currNode = networkData.nodes[i];\n          currNode.x = Math.max(-width, Math.min(width, currNode.x));\n          currNode.y = Math.max(-height, Math.min(height, currNode.y));\n        }\n      }\n    }, []);\n\n    const width = document.getElementById('clusters').offsetWidth;\n    const height = width;\n\n    return (\n      <ForceGraph2D\n        ref={fgRef}\n        width={width}\n        height={height}\n        graphData={networkData}\n        nodeLabel=\"id\"\n        nodeColor={(node) => (node.group === 'source' ? '#dc3545' : 'gray')}\n        linkDirectionalParticleColor={() => 'red'}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleWidth={(link) =>\n          link.source.id[0] === 'P' ? 2 : 0\n        }\n        enableZoomPanInteraction={false}\n      />\n    );\n  };\n\n  useEffect(() => {\n    ReactDOM.render(<NetworkGraph />, document.getElementById('clusters'));\n  }, [networkData]);\n\n  return <div id=\"clusters\"></div>;\n}\n\nexport default React.memo(Clusters, isEqual);\n"]},"metadata":{},"sourceType":"module"}