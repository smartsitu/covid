{"ast":null,"code":"var _jsxFileName = \"/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/resourcetable.js\";\nimport TableAccordion from './Essentials/essentialsaccordionmobile';\nimport { // renderCell,\ngetHighlightedText, getFormattedLink } from './Essentials/essentialsutls';\nimport React from 'react'; // import Autosuggest from 'react-autosuggest';\n\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useTable } from 'react-table';\n\nfunction ResourceTable({\n  columns,\n  data,\n  isDesktop,\n  totalCount,\n  onScrollUpdate,\n  searchValue\n}) {\n  const renderCell = celli => {\n    const value = celli.cell.value;\n    let renderedvalue = '';\n    const link = celli.row.allCells[5].value.split(',')[0];\n    if (celli.column.id === 'contact') renderedvalue = getFormattedLink(getHighlightedText(value, searchValue, 'desktop'));else if (celli.column.id === 'phonenumber') {\n      // renderedvalue = String(JSON.parse(JSON.stringify(getNumbersLink(value))).numberList).replace(/,/g, '<br>');\n      renderedvalue = getFormattedLink(getHighlightedText(value, searchValue, 'desktop'));\n    } else if (celli.column.id === 'nameoftheorganisation') {\n      if (link !== '') renderedvalue = `<a href=${link} target=\"_blank\">${getHighlightedText(value, searchValue, 'desktop')}</a>`;else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n    } else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tablecelldata\",\n      dangerouslySetInnerHTML: {\n        __html: renderedvalue\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    });\n  }; // Use the state and functions returned from useTable to build your UI\n\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      hiddenColumns: 'contact'\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: data.length,\n    hasMore: data.length < totalCount,\n    next: onScrollUpdate,\n    loader: /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://upload.wikimedia.org/wikipedia/commons/d/dd/Loading-gif-builder-comwrap.gif\",\n      alt: \"Loading data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    })),\n    style: isDesktop ? {\n      width: '100%',\n      overflow: 'none'\n    } : {\n      width: '100%',\n      overflow: 'none',\n      maxWidth: '300px'\n    },\n    endMessage: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, !data.length && /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    }, \"No Results Found\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tableandaccordions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, isDesktop && /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({\n    key: headerGroup.id\n  }, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }), headerGroup.headers.map((column, i) => /*#__PURE__*/React.createElement(\"th\", Object.assign({\n    key: column.id\n  }, column.getHeaderProps(), {\n    className: i === 3 ? 'descriptionCol sticky' : 'sticky',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 23\n    }\n  }), column.render('Header')))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({\n      key: row.id\n    }, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }), row.cells.map((cell, cellindex) => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({\n        key: cellindex\n      }, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 27\n        }\n      }), cell.render(renderCell));\n    }));\n  }))), !isDesktop && /*#__PURE__*/React.createElement(TableAccordion, {\n    rows: rows,\n    searchValue: searchValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default ResourceTable;","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/resourcetable.js"],"names":["TableAccordion","getHighlightedText","getFormattedLink","React","InfiniteScroll","useTable","ResourceTable","columns","data","isDesktop","totalCount","onScrollUpdate","searchValue","renderCell","celli","value","cell","renderedvalue","link","row","allCells","split","column","id","__html","getTableProps","getTableBodyProps","headerGroups","prepareRow","rows","initialState","hiddenColumns","length","textAlign","width","overflow","maxWidth","map","headerGroup","getHeaderGroupProps","headers","i","getHeaderProps","render","getRowProps","cells","cellindex","getCellProps"],"mappings":"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","sourcesContent":["import TableAccordion from './Essentials/essentialsaccordionmobile';\nimport {\n  // renderCell,\n  getHighlightedText,\n  getFormattedLink,\n} from './Essentials/essentialsutls';\n\nimport React from 'react';\n// import Autosuggest from 'react-autosuggest';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {useTable} from 'react-table';\n\nfunction ResourceTable({\n  columns,\n  data,\n  isDesktop,\n  totalCount,\n  onScrollUpdate,\n  searchValue,\n}) {\n  const renderCell = (celli) => {\n    const value = celli.cell.value;\n    let renderedvalue = '';\n    const link = celli.row.allCells[5].value.split(',')[0];\n\n    if (celli.column.id === 'contact')\n      renderedvalue = getFormattedLink(\n        getHighlightedText(value, searchValue, 'desktop')\n      );\n    else if (celli.column.id === 'phonenumber') {\n      // renderedvalue = String(JSON.parse(JSON.stringify(getNumbersLink(value))).numberList).replace(/,/g, '<br>');\n      renderedvalue = getFormattedLink(\n        getHighlightedText(value, searchValue, 'desktop')\n      );\n    } else if (celli.column.id === 'nameoftheorganisation') {\n      if (link !== '')\n        renderedvalue = `<a href=${link} target=\"_blank\">${getHighlightedText(\n          value,\n          searchValue,\n          'desktop'\n        )}</a>`;\n      else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n    } else renderedvalue = getHighlightedText(value, searchValue, 'desktop');\n\n    return (\n      <div\n        className=\"tablecelldata\"\n        dangerouslySetInnerHTML={{\n          __html: renderedvalue,\n        }}\n      ></div>\n    );\n  };\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows,\n  } = useTable({\n    columns,\n    data,\n    initialState: {hiddenColumns: 'contact'},\n  });\n  return (\n    <React.Fragment>\n      <InfiniteScroll\n        dataLength={data.length}\n        hasMore={data.length < totalCount}\n        next={onScrollUpdate}\n        loader={\n          <h3 style={{textAlign: 'center'}}>\n            <img\n              src=\"https://upload.wikimedia.org/wikipedia/commons/d/dd/Loading-gif-builder-comwrap.gif\"\n              alt=\"Loading data\"\n            />\n          </h3>\n        }\n        style={\n          isDesktop\n            ? {width: '100%', overflow: 'none'}\n            : {width: '100%', overflow: 'none', maxWidth: '300px'}\n        }\n        endMessage={\n          <div>\n            {!data.length && (\n              <h3 style={{textAlign: 'center'}}>No Results Found</h3>\n            )}\n          </div>\n        }\n      >\n        <div className=\"tableandaccordions\">\n          {isDesktop && (\n            <table {...getTableProps()}>\n              <thead>\n                {headerGroups.map((headerGroup) => (\n                  <tr\n                    key={headerGroup.id}\n                    {...headerGroup.getHeaderGroupProps()}\n                  >\n                    {headerGroup.headers.map((column, i) => (\n                      <th\n                        key={column.id}\n                        {...column.getHeaderProps()}\n                        className={i === 3 ? 'descriptionCol sticky' : 'sticky'}\n                      >\n                        {column.render('Header')}\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                  prepareRow(row);\n                  return (\n                    <tr key={row.id} {...row.getRowProps()}>\n                      {row.cells.map((cell, cellindex) => {\n                        return (\n                          <td key={cellindex} {...cell.getCellProps()}>\n                            {cell.render(renderCell)}\n                          </td>\n                        );\n                      })}\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n          {!isDesktop && (\n            <TableAccordion rows={rows} searchValue={searchValue} />\n          )}\n        </div>\n      </InfiniteScroll>\n    </React.Fragment>\n  );\n}\n\nexport default ResourceTable;\n"]},"metadata":{},"sourceType":"module"}