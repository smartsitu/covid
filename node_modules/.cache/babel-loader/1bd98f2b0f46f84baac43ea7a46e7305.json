{"ast":null,"code":"var _jsxFileName = \"/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/home.js\";\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport Search from './search';\nimport Table from './table';\nimport TimeSeriesExplorer from './timeseriesexplorer';\nimport Updates from './updates';\nimport { MAP_META } from '../constants';\nimport { formatDate, formatDateAbsolute, mergeTimeseries, preprocessTimeseries, parseStateTimeseries, parseStateTestTimeseries, parseTotalTestTimeseries } from '../utils/commonfunctions';\nimport axios from 'axios';\nimport React, { useState, useCallback } from 'react';\nimport * as Icon from 'react-feather';\nimport { Helmet } from 'react-helmet';\nimport { useEffectOnce, useLocalStorage, useFavicon } from 'react-use';\n\nfunction Home(props) {\n  const [states, setStates] = useState([]);\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\n  const [stateTestData, setStateTestData] = useState({});\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [timeseries, setTimeseries] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [activeStateCode, setActiveStateCode] = useState('TT');\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\n  const [rowHighlighted, setRowHighlighted] = useState({\n    statecode: undefined,\n    isDistrict: false,\n    districtName: undefined\n  });\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [anchor, setAnchor] = useState(null);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', null);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  useFavicon(newUpdate ? '/icon_update.png' : '/favicon.ico');\n  useEffectOnce(() => {\n    getStates();\n  });\n  useEffectOnce(() => {\n    axios.get('https://api.covid19india.org/updatelog/log.json').then(response => {\n      const lastTimestamp = response.data.slice().reverse()[0].timestamp.toString();\n\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  });\n\n  const getStates = async () => {\n    try {\n      const [{\n        data\n      }, stateDistrictWiseResponse, {\n        data: statesDailyResponse\n      }, {\n        data: stateTestData\n      }] = await Promise.all([axios.get('https://api.covid19india.org/data.json'), axios.get('https://api.covid19india.org/state_district_wise.json'), axios.get('https://api.covid19india.org/states_daily.json'), axios.get('https://api.covid19india.org/state_test_data.json')]);\n      setStates(data.statewise);\n      const ts = parseStateTimeseries(statesDailyResponse);\n      ts['TT'] = preprocessTimeseries(data.cases_time_series); // Testing data timeseries\n\n      const testTs = parseStateTestTimeseries(stateTestData.states_tested_data);\n      testTs['TT'] = parseTotalTestTimeseries(data.tested); // Merge\n\n      const tsMerged = mergeTimeseries(ts, testTs);\n      setTimeseries(tsMerged);\n      setLastUpdated(data.statewise[0].lastupdatedtime);\n      const testData = [...stateTestData.states_tested_data].reverse();\n      const totalTest = data.tested[data.tested.length - 1];\n      testData.push({\n        updatedon: totalTest.updatetimestamp.split(' ')[0],\n        totaltested: totalTest.totalsamplestested,\n        source: totalTest.source,\n        state: 'Total'\n      });\n      setStateTestData(testData);\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onHighlightState = (state, index) => {\n    if (!state && !index) return setRegionHighlighted(null);\n    setRegionHighlighted({\n      state,\n      index\n    });\n  };\n\n  const onHighlightDistrict = (district, state, index) => {\n    if (!state && !index && !district) return setRegionHighlighted(null);\n    setRegionHighlighted({\n      district,\n      state,\n      index\n    });\n  };\n\n  const onMapHighlightChange = useCallback(region => {\n    setActiveStateCode(region.statecode);\n    if ('districtName' in region) setRowHighlighted({\n      statecode: region.statecode,\n      isDistrict: true,\n      districtName: region.districtName\n    });else setRowHighlighted({\n      statecode: region.statecode,\n      isDistrict: false,\n      districtName: undefined\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"Coronavirus Outbreak in India - covid19india.org\"), /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"title\",\n    content: \"Coronavirus Outbreak in India: Latest Map and Case Count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"home-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header fadeInUp\",\n    style: {\n      animationDelay: '1s'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, fetched && /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, isNaN(Date.parse(formatDate(lastUpdated))) ? '' : formatDateAbsolute(lastUpdated)), !showUpdates && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bell-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, fetched && /*#__PURE__*/React.createElement(Icon.Bell, {\n    onClick: () => {\n      setShowUpdates(!showUpdates);\n      setNewUpdate(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }), newUpdate && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"indicator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 33\n    }\n  })), showUpdates && /*#__PURE__*/React.createElement(Icon.BellOff, {\n    onClick: () => {\n      setShowUpdates(!showUpdates);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }))), showUpdates && /*#__PURE__*/React.createElement(Updates, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 27\n    }\n  }), fetched && /*#__PURE__*/React.createElement(Level, {\n    data: states[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 23\n    }\n  }), fetched && /*#__PURE__*/React.createElement(Minigraph, {\n    timeseries: timeseries['TT'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 23\n    }\n  }), fetched && /*#__PURE__*/React.createElement(Table, {\n    states: states,\n    summary: false,\n    stateDistrictWiseData: stateDistrictWiseData,\n    rowHighlighted: rowHighlighted,\n    onHighlightState: onHighlightState,\n    onHighlightDistrict: onHighlightDistrict,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"home-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, fetched && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MapExplorer, {\n    mapMeta: MAP_META.India,\n    states: states,\n    stateDistrictWiseData: stateDistrictWiseData,\n    stateTestData: stateTestData,\n    regionHighlighted: regionHighlighted,\n    onMapHighlightChange: onMapHighlightChange,\n    isCountryLoaded: true,\n    anchor: anchor,\n    setAnchor: setAnchor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }), fetched && /*#__PURE__*/React.createElement(TimeSeriesExplorer, {\n    timeseries: timeseries[activeStateCode],\n    activeStateCode: activeStateCode,\n    onHighlightState: onHighlightState,\n    states: states,\n    anchor: anchor,\n    setAnchor: setAnchor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  })))), fetched && /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 19\n    }\n  }));\n}\n\nexport default React.memo(Home);","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/home.js"],"names":["Footer","Level","MapExplorer","Minigraph","Search","Table","TimeSeriesExplorer","Updates","MAP_META","formatDate","formatDateAbsolute","mergeTimeseries","preprocessTimeseries","parseStateTimeseries","parseStateTestTimeseries","parseTotalTestTimeseries","axios","React","useState","useCallback","Icon","Helmet","useEffectOnce","useLocalStorage","useFavicon","Home","props","states","setStates","stateDistrictWiseData","setStateDistrictWiseData","stateTestData","setStateTestData","lastUpdated","setLastUpdated","timeseries","setTimeseries","fetched","setFetched","activeStateCode","setActiveStateCode","regionHighlighted","setRegionHighlighted","undefined","rowHighlighted","setRowHighlighted","statecode","isDistrict","districtName","showUpdates","setShowUpdates","anchor","setAnchor","lastViewedLog","setLastViewedLog","newUpdate","setNewUpdate","getStates","get","then","response","lastTimestamp","data","slice","reverse","timestamp","toString","catch","err","console","log","stateDistrictWiseResponse","statesDailyResponse","Promise","all","statewise","ts","cases_time_series","testTs","states_tested_data","tested","tsMerged","lastupdatedtime","testData","totalTest","length","push","updatedon","updatetimestamp","split","totaltested","totalsamplestested","source","state","onHighlightState","index","onHighlightDistrict","district","onMapHighlightChange","region","animationDelay","isNaN","Date","parse","India","memo"],"mappings":"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","sourcesContent":["import Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport Search from './search';\nimport Table from './table';\nimport TimeSeriesExplorer from './timeseriesexplorer';\nimport Updates from './updates';\n\nimport {MAP_META} from '../constants';\nimport {\n  formatDate,\n  formatDateAbsolute,\n  mergeTimeseries,\n  preprocessTimeseries,\n  parseStateTimeseries,\n  parseStateTestTimeseries,\n  parseTotalTestTimeseries,\n} from '../utils/commonfunctions';\n\nimport axios from 'axios';\nimport React, {useState, useCallback} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useEffectOnce, useLocalStorage, useFavicon} from 'react-use';\n\nfunction Home(props) {\n  const [states, setStates] = useState([]);\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState({});\n  const [stateTestData, setStateTestData] = useState({});\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [timeseries, setTimeseries] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [activeStateCode, setActiveStateCode] = useState('TT');\n  const [regionHighlighted, setRegionHighlighted] = useState(undefined);\n  const [rowHighlighted, setRowHighlighted] = useState({\n    statecode: undefined,\n    isDistrict: false,\n    districtName: undefined,\n  });\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [anchor, setAnchor] = useState(null);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage(\n    'lastViewedLog',\n    null\n  );\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n\n  useFavicon(newUpdate ? '/icon_update.png' : '/favicon.ico');\n\n  useEffectOnce(() => {\n    getStates();\n  });\n\n  useEffectOnce(() => {\n    axios\n      .get('https://api.covid19india.org/updatelog/log.json')\n      .then((response) => {\n        const lastTimestamp = response.data\n          .slice()\n          .reverse()[0]\n          .timestamp.toString();\n        if (lastTimestamp !== lastViewedLog) {\n          setNewUpdate(true);\n          setLastViewedLog(lastTimestamp);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  });\n\n  const getStates = async () => {\n    try {\n      const [\n        {data},\n        stateDistrictWiseResponse,\n        {data: statesDailyResponse},\n        {data: stateTestData},\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/states_daily.json'),\n        axios.get('https://api.covid19india.org/state_test_data.json'),\n      ]);\n\n      setStates(data.statewise);\n\n      const ts = parseStateTimeseries(statesDailyResponse);\n      ts['TT'] = preprocessTimeseries(data.cases_time_series);\n      // Testing data timeseries\n      const testTs = parseStateTestTimeseries(stateTestData.states_tested_data);\n      testTs['TT'] = parseTotalTestTimeseries(data.tested);\n      // Merge\n      const tsMerged = mergeTimeseries(ts, testTs);\n      setTimeseries(tsMerged);\n\n      setLastUpdated(data.statewise[0].lastupdatedtime);\n\n      const testData = [...stateTestData.states_tested_data].reverse();\n      const totalTest = data.tested[data.tested.length - 1];\n      testData.push({\n        updatedon: totalTest.updatetimestamp.split(' ')[0],\n        totaltested: totalTest.totalsamplestested,\n        source: totalTest.source,\n        state: 'Total',\n      });\n      setStateTestData(testData);\n\n      setStateDistrictWiseData(stateDistrictWiseResponse.data);\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onHighlightState = (state, index) => {\n    if (!state && !index) return setRegionHighlighted(null);\n    setRegionHighlighted({state, index});\n  };\n\n  const onHighlightDistrict = (district, state, index) => {\n    if (!state && !index && !district) return setRegionHighlighted(null);\n    setRegionHighlighted({district, state, index});\n  };\n\n  const onMapHighlightChange = useCallback((region) => {\n    setActiveStateCode(region.statecode);\n    if ('districtName' in region)\n      setRowHighlighted({\n        statecode: region.statecode,\n        isDistrict: true,\n        districtName: region.districtName,\n      });\n    else\n      setRowHighlighted({\n        statecode: region.statecode,\n        isDistrict: false,\n        districtName: undefined,\n      });\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Home\">\n        <Helmet>\n          <title>Coronavirus Outbreak in India - covid19india.org</title>\n          <meta\n            name=\"title\"\n            content=\"Coronavirus Outbreak in India: Latest Map and Case Count\"\n          />\n        </Helmet>\n\n        <div className=\"home-left\">\n          <div className=\"header fadeInUp\" style={{animationDelay: '1s'}}>\n            {fetched && <Search />}\n\n            <div className=\"actions\">\n              <h5>\n                {isNaN(Date.parse(formatDate(lastUpdated)))\n                  ? ''\n                  : formatDateAbsolute(lastUpdated)}\n              </h5>\n              {!showUpdates && (\n                <div className=\"bell-icon\">\n                  {fetched && (\n                    <Icon.Bell\n                      onClick={() => {\n                        setShowUpdates(!showUpdates);\n                        setNewUpdate(false);\n                      }}\n                    />\n                  )}\n                  {newUpdate && <div className=\"indicator\"></div>}\n                </div>\n              )}\n              {showUpdates && (\n                <Icon.BellOff\n                  onClick={() => {\n                    setShowUpdates(!showUpdates);\n                  }}\n                />\n              )}\n            </div>\n          </div>\n\n          {showUpdates && <Updates />}\n\n          {fetched && <Level data={states[0]} />}\n          {fetched && <Minigraph timeseries={timeseries['TT']} />}\n          {fetched && (\n            <Table\n              states={states}\n              summary={false}\n              stateDistrictWiseData={stateDistrictWiseData}\n              rowHighlighted={rowHighlighted}\n              onHighlightState={onHighlightState}\n              onHighlightDistrict={onHighlightDistrict}\n            />\n          )}\n        </div>\n\n        <div className=\"home-right\">\n          {fetched && (\n            <React.Fragment>\n              <MapExplorer\n                mapMeta={MAP_META.India}\n                states={states}\n                stateDistrictWiseData={stateDistrictWiseData}\n                stateTestData={stateTestData}\n                regionHighlighted={regionHighlighted}\n                onMapHighlightChange={onMapHighlightChange}\n                isCountryLoaded={true}\n                anchor={anchor}\n                setAnchor={setAnchor}\n              />\n\n              {fetched && (\n                <TimeSeriesExplorer\n                  timeseries={timeseries[activeStateCode]}\n                  activeStateCode={activeStateCode}\n                  onHighlightState={onHighlightState}\n                  states={states}\n                  anchor={anchor}\n                  setAnchor={setAnchor}\n                />\n              )}\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n      {fetched && <Footer />}\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(Home);\n"]},"metadata":{},"sourceType":"module"}