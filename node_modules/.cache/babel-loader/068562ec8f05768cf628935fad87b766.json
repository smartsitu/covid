{"ast":null,"code":"import { STATE_CODES } from '../constants';\nimport { parse, isBefore, isSameDay, startOfDay } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec'\n};\nexport const getStateName = code => {\n  return STATE_CODES[code.toUpperCase()];\n};\nexport const getIndiaDay = () => {\n  return startOfDay(utcToZonedTime(new Date(), 'Asia/Kolkata'));\n};\nexport const formatDate = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\nexport const formatDateAbsolute = unformattedDate => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nconst validateCTS = (data = []) => {\n  const dataTypes = ['dailyconfirmed', 'dailydeceased', 'dailyrecovered', 'totalconfirmed', 'totaldeceased', 'totalrecovered'];\n  return data.filter(d => dataTypes.every(dt => d[dt]) && d.date).filter(d => dataTypes.every(dt => Number(d[dt]) >= 0)).filter(d => {\n    // Skip data from the current day\n    const today = getIndiaDay();\n    const date = parse(d.date, 'dd MMMM', new Date(2020, 0, 1));\n    return isBefore(date, today);\n  });\n};\n\nexport const preprocessTimeseries = timeseries => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: parse(stat.date, 'dd MMMM', new Date(2020, 0, 1)),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive: +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive: +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased\n  }));\n};\n/**\n * Returns the last `days` entries\n * @param {Array<Object>} timeseries\n * @param {number} days\n *\n * @return {Array<Object>}\n */\n\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\nexport const formatNumber = value => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\nexport const parseStateTimeseries = ({\n  states_daily: data\n}) => {\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n  const today = getIndiaDay();\n\n  for (let i = 0; i < data.length; i += 3) {\n    const date = parse(data[i].date, 'dd-MMM-yy', new Date()); // Skip data from the current day\n\n    if (isBefore(date, today)) {\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\n        const stateCode = k.toLowerCase();\n        const prev = v[v.length - 1] || {}; // Parser\n\n        const dailyconfirmed = +data[i][stateCode] || 0;\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\n        const dailydeceased = +data[i + 2][stateCode] || 0;\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\n        const totalrecovered = +data[i + 1][stateCode] + (prev.totalrecovered || 0);\n        const totaldeceased = +data[i + 2][stateCode] + (prev.totaldeceased || 0); // Push\n\n        v.push({\n          date: date,\n          dailyconfirmed: dailyconfirmed,\n          dailyrecovered: dailyrecovered,\n          dailydeceased: dailydeceased,\n          totalconfirmed: totalconfirmed,\n          totalrecovered: totalrecovered,\n          totaldeceased: totaldeceased,\n          // Active = Confimed - Recovered - Deceased\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased\n        });\n      });\n    }\n  }\n\n  return statewiseSeries;\n};\nexport const parseStateTestTimeseries = data => {\n  const stateCodeMap = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[STATE_CODES[sc]] = sc;\n    return ret;\n  }, {});\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[sc] = [];\n    return ret;\n  }, {});\n  const today = getIndiaDay();\n  data.forEach(d => {\n    const date = parse(d.updatedon, 'dd/MM/yyyy', new Date());\n    const totaltested = +d.totaltested;\n\n    if (isBefore(date, today) && totaltested) {\n      const stateCode = stateCodeMap[d.state];\n      testTimseries[stateCode].push({\n        date: date,\n        totaltested: totaltested\n      });\n    }\n  });\n  return testTimseries;\n};\nexport const parseTotalTestTimeseries = data => {\n  const testTimseries = [];\n  const today = getIndiaDay();\n  data.forEach(d => {\n    const date = parse(d.updatetimestamp.split(' ')[0], 'dd/MM/yyyy', new Date());\n    const totaltested = +d.totalsamplestested;\n\n    if (isBefore(date, today) && totaltested) {\n      testTimseries.push({\n        date: date,\n        totaltested: totaltested\n      });\n    }\n  });\n  return testTimseries;\n};\nexport const mergeTimeseries = (ts1, ts2) => {\n  const tsRet = Object.assign({}, ts1);\n\n  for (const state in ts1) {\n    if (ts1.hasOwnProperty(state)) {\n      tsRet[state] = ts1[state].map(d1 => {\n        const testData = ts2[state].find(d2 => isSameDay(d1.date, d2.date));\n        return {\n          totaltested: testData === null || testData === void 0 ? void 0 : testData.totaltested,\n          ...d1\n        };\n      });\n    }\n  }\n\n  return tsRet;\n};","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/utils/commonfunctions.js"],"names":["STATE_CODES","parse","isBefore","isSameDay","startOfDay","utcToZonedTime","months","getStateName","code","toUpperCase","getIndiaDay","Date","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","validateCTS","data","dataTypes","filter","d","every","dt","date","Number","today","preprocessTimeseries","timeseries","map","stat","index","totalconfirmed","totalrecovered","totaldeceased","dailyconfirmed","dailyrecovered","dailydeceased","totalactive","dailyactive","sliceTimeseriesFromEnd","days","formatNumber","value","numberFormatter","Intl","NumberFormat","isNaN","format","parseStateTimeseries","states_daily","statewiseSeries","Object","keys","reduce","a","c","i","length","entries","forEach","k","v","stateCode","toLowerCase","prev","push","parseStateTestTimeseries","stateCodeMap","ret","sc","testTimseries","updatedon","totaltested","state","parseTotalTestTimeseries","updatetimestamp","split","totalsamplestested","mergeTimeseries","ts1","ts2","tsRet","assign","hasOwnProperty","d1","testData","find","d2"],"mappings":"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","sourcesContent":["import {STATE_CODES} from '../constants';\n\nimport {parse, isBefore, isSameDay, startOfDay} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\n\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec',\n};\n\nexport const getStateName = (code) => {\n  return STATE_CODES[code.toUpperCase()];\n};\n\nexport const getIndiaDay = () => {\n  return startOfDay(utcToZonedTime(new Date(), 'Asia/Kolkata'));\n};\n\nexport const formatDate = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\n\nexport const formatDateAbsolute = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nconst validateCTS = (data = []) => {\n  const dataTypes = [\n    'dailyconfirmed',\n    'dailydeceased',\n    'dailyrecovered',\n    'totalconfirmed',\n    'totaldeceased',\n    'totalrecovered',\n  ];\n  return data\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\n    .filter((d) => {\n      // Skip data from the current day\n      const today = getIndiaDay();\n      const date = parse(d.date, 'dd MMMM', new Date(2020, 0, 1));\n      return isBefore(date, today);\n    });\n};\n\nexport const preprocessTimeseries = (timeseries) => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: parse(stat.date, 'dd MMMM', new Date(2020, 0, 1)),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive:\n      +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive:\n      +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased,\n  }));\n};\n\n/**\n * Returns the last `days` entries\n * @param {Array<Object>} timeseries\n * @param {number} days\n *\n * @return {Array<Object>}\n */\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\n\nexport const formatNumber = (value) => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\n\nexport const parseStateTimeseries = ({states_daily: data}) => {\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n\n  const today = getIndiaDay();\n  for (let i = 0; i < data.length; i += 3) {\n    const date = parse(data[i].date, 'dd-MMM-yy', new Date());\n    // Skip data from the current day\n    if (isBefore(date, today)) {\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\n        const stateCode = k.toLowerCase();\n        const prev = v[v.length - 1] || {};\n        // Parser\n        const dailyconfirmed = +data[i][stateCode] || 0;\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\n        const dailydeceased = +data[i + 2][stateCode] || 0;\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\n        const totalrecovered =\n          +data[i + 1][stateCode] + (prev.totalrecovered || 0);\n        const totaldeceased =\n          +data[i + 2][stateCode] + (prev.totaldeceased || 0);\n        // Push\n        v.push({\n          date: date,\n          dailyconfirmed: dailyconfirmed,\n          dailyrecovered: dailyrecovered,\n          dailydeceased: dailydeceased,\n          totalconfirmed: totalconfirmed,\n          totalrecovered: totalrecovered,\n          totaldeceased: totaldeceased,\n          // Active = Confimed - Recovered - Deceased\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased,\n        });\n      });\n    }\n  }\n\n  return statewiseSeries;\n};\n\nexport const parseStateTestTimeseries = (data) => {\n  const stateCodeMap = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[STATE_CODES[sc]] = sc;\n    return ret;\n  }, {});\n\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[sc] = [];\n    return ret;\n  }, {});\n\n  const today = getIndiaDay();\n  data.forEach((d) => {\n    const date = parse(d.updatedon, 'dd/MM/yyyy', new Date());\n    const totaltested = +d.totaltested;\n    if (isBefore(date, today) && totaltested) {\n      const stateCode = stateCodeMap[d.state];\n      testTimseries[stateCode].push({\n        date: date,\n        totaltested: totaltested,\n      });\n    }\n  });\n  return testTimseries;\n};\n\nexport const parseTotalTestTimeseries = (data) => {\n  const testTimseries = [];\n  const today = getIndiaDay();\n  data.forEach((d) => {\n    const date = parse(\n      d.updatetimestamp.split(' ')[0],\n      'dd/MM/yyyy',\n      new Date()\n    );\n    const totaltested = +d.totalsamplestested;\n    if (isBefore(date, today) && totaltested) {\n      testTimseries.push({\n        date: date,\n        totaltested: totaltested,\n      });\n    }\n  });\n  return testTimseries;\n};\n\nexport const mergeTimeseries = (ts1, ts2) => {\n  const tsRet = Object.assign({}, ts1);\n  for (const state in ts1) {\n    if (ts1.hasOwnProperty(state)) {\n      tsRet[state] = ts1[state].map((d1) => {\n        const testData = ts2[state].find((d2) => isSameDay(d1.date, d2.date));\n        return {\n          totaltested: testData?.totaltested,\n          ...d1,\n        };\n      });\n    }\n  }\n  return tsRet;\n};\n"]},"metadata":{},"sourceType":"module"}