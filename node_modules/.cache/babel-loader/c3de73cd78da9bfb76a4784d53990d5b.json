{"ast":null,"code":"import { scheduler, updateCount } from './utils/scheduler';\nimport { ResizeObservation } from './ResizeObservation';\nimport { ResizeObserverDetail } from './ResizeObserverDetail';\nimport { resizeObservers } from './utils/resizeObservers';\nvar observerMap = new Map();\n\nvar getObservationIndex = function (observationTargets, target) {\n  for (var i = 0; i < observationTargets.length; i += 1) {\n    if (observationTargets[i].target === target) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nvar ResizeObserverController = function () {\n  function ResizeObserverController() {}\n\n  ResizeObserverController.connect = function (resizeObserver, callback) {\n    var detail = new ResizeObserverDetail(resizeObserver, callback);\n    resizeObservers.push(detail);\n    observerMap.set(resizeObserver, detail);\n  };\n\n  ResizeObserverController.observe = function (resizeObserver, target, options) {\n    if (observerMap.has(resizeObserver)) {\n      var detail = observerMap.get(resizeObserver);\n\n      if (getObservationIndex(detail.observationTargets, target) < 0) {\n        detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n        updateCount(1);\n        scheduler.schedule();\n      }\n    }\n  };\n\n  ResizeObserverController.unobserve = function (resizeObserver, target) {\n    if (observerMap.has(resizeObserver)) {\n      var detail = observerMap.get(resizeObserver);\n      var index = getObservationIndex(detail.observationTargets, target);\n\n      if (index >= 0) {\n        detail.observationTargets.splice(index, 1);\n        updateCount(-1);\n      }\n    }\n  };\n\n  ResizeObserverController.disconnect = function (resizeObserver) {\n    if (observerMap.has(resizeObserver)) {\n      var detail = observerMap.get(resizeObserver);\n      resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n      observerMap.delete(resizeObserver);\n      updateCount(-detail.observationTargets.length);\n    }\n  };\n\n  return ResizeObserverController;\n}();\n\nexport { ResizeObserverController };","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/node_modules/@juggle/resize-observer/lib/ResizeObserverController.js"],"names":["scheduler","updateCount","ResizeObservation","ResizeObserverDetail","resizeObservers","observerMap","Map","getObservationIndex","observationTargets","target","i","length","ResizeObserverController","connect","resizeObserver","callback","detail","push","set","observe","options","has","get","box","schedule","unobserve","index","splice","disconnect","indexOf","delete"],"mappings":"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","sourcesContent":["import { scheduler, updateCount } from './utils/scheduler';\nimport { ResizeObservation } from './ResizeObservation';\nimport { ResizeObserverDetail } from './ResizeObserverDetail';\nimport { resizeObservers } from './utils/resizeObservers';\nvar observerMap = new Map();\nvar getObservationIndex = function (observationTargets, target) {\n    for (var i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nvar ResizeObserverController = (function () {\n    function ResizeObserverController() {\n    }\n    ResizeObserverController.connect = function (resizeObserver, callback) {\n        var detail = new ResizeObserverDetail(resizeObserver, callback);\n        resizeObservers.push(detail);\n        observerMap.set(resizeObserver, detail);\n    };\n    ResizeObserverController.observe = function (resizeObserver, target, options) {\n        if (observerMap.has(resizeObserver)) {\n            var detail = observerMap.get(resizeObserver);\n            if (getObservationIndex(detail.observationTargets, target) < 0) {\n                detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n                updateCount(1);\n                scheduler.schedule();\n            }\n        }\n    };\n    ResizeObserverController.unobserve = function (resizeObserver, target) {\n        if (observerMap.has(resizeObserver)) {\n            var detail = observerMap.get(resizeObserver);\n            var index = getObservationIndex(detail.observationTargets, target);\n            if (index >= 0) {\n                detail.observationTargets.splice(index, 1);\n                updateCount(-1);\n            }\n        }\n    };\n    ResizeObserverController.disconnect = function (resizeObserver) {\n        if (observerMap.has(resizeObserver)) {\n            var detail = observerMap.get(resizeObserver);\n            resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n            observerMap.delete(resizeObserver);\n            updateCount(-detail.observationTargets.length);\n        }\n    };\n    return ResizeObserverController;\n}());\nexport { ResizeObserverController };\n"]},"metadata":{},"sourceType":"module"}