{"ast":null,"code":"var _jsxFileName = \"/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/Charts/genderchart.js\";\nimport { defaultOptions, formatNumber } from './chart-defaults';\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nfunction GenderChart(props) {\n  let male = 0;\n  let female = 0;\n\n  if (!props.data || props.data.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 12\n      }\n    });\n  }\n\n  props.data.forEach(patient => {\n    if (patient.gender === 'M') {\n      male++;\n    } else if (patient.gender === 'F') {\n      female++;\n    }\n  });\n  const chartData = {\n    datasets: [{\n      data: [male, female],\n      backgroundColor: ['#6497f3', '#ea6e9a'],\n      label: 'Hola'\n    }],\n    labels: ['Male', 'Female']\n  };\n  const chartOptions = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'point',\n      position: 'nearest',\n      callbacks: {\n        label: function (tooltipItem, data) {\n          const dataset = data.datasets[tooltipItem.datasetIndex];\n\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n          const total = meta.total;\n          const currentValue = dataset.data[tooltipItem.index];\n          const percentage = parseFloat((currentValue / total * 100).toFixed(1));\n          return formatNumber(currentValue) + ' (' + percentage + '%)';\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        }\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"charts-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-content doughnut\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: chartData,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Sample size: \", formatNumber(male + female), \" patients\"));\n}\n\nexport default GenderChart;","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/src/components/Charts/genderchart.js"],"names":["defaultOptions","formatNumber","deepmerge","React","Doughnut","GenderChart","props","male","female","data","length","forEach","patient","gender","chartData","datasets","backgroundColor","label","labels","chartOptions","tooltips","mode","position","callbacks","tooltipItem","dataset","datasetIndex","meta","_meta","Object","keys","total","currentValue","index","percentage","parseFloat","toFixed","title"],"mappings":"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","sourcesContent":["import {defaultOptions, formatNumber} from './chart-defaults';\n\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport {Doughnut} from 'react-chartjs-2';\n\nfunction GenderChart(props) {\n  let male = 0;\n  let female = 0;\n\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  props.data.forEach((patient) => {\n    if (patient.gender === 'M') {\n      male++;\n    } else if (patient.gender === 'F') {\n      female++;\n    }\n  });\n\n  const chartData = {\n    datasets: [\n      {\n        data: [male, female],\n        backgroundColor: ['#6497f3', '#ea6e9a'],\n        label: 'Hola',\n      },\n    ],\n    labels: ['Male', 'Female'],\n  };\n\n  const chartOptions = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'point',\n      position: 'nearest',\n      callbacks: {\n        label: function (tooltipItem, data) {\n          const dataset = data.datasets[tooltipItem.datasetIndex];\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\n          const total = meta.total;\n          const currentValue = dataset.data[tooltipItem.index];\n          const percentage = parseFloat(\n            ((currentValue / total) * 100).toFixed(1)\n          );\n          return formatNumber(currentValue) + ' (' + percentage + '%)';\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        },\n      },\n    },\n  });\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content doughnut\">\n        <Doughnut data={chartData} options={chartOptions} />\n      </div>\n      <div className=\"chart-note\">\n        Sample size: {formatNumber(male + female)} patients\n      </div>\n    </div>\n  );\n}\n\nexport default GenderChart;\n"]},"metadata":{},"sourceType":"module"}