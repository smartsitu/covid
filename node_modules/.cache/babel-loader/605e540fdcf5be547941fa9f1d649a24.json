{"ast":null,"code":"(function () {\n  \"use strict\"; // math-inlining.\n\n  var abs = Math.abs,\n      cos = Math.cos,\n      sin = Math.sin,\n      acos = Math.acos,\n      atan2 = Math.atan2,\n      sqrt = Math.sqrt,\n      pow = Math.pow,\n      // cube root function yielding real roots\n  crt = function (v) {\n    return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n  },\n      // trig constants\n  pi = Math.PI,\n      tau = 2 * pi,\n      quart = pi / 2,\n      // float precision significant decimal\n  epsilon = 0.000001,\n      // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n      nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n      // a zero coordinate, which is surprisingly useful\n  ZERO = {\n    x: 0,\n    y: 0,\n    z: 0\n  }; // Bezier utility functions\n\n\n  var utils = {\n    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n    Tvalues: [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745],\n    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n    Cvalues: [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759],\n    arcfn: function (t, derivativeFn) {\n      var d = derivativeFn(t);\n      var l = d.x * d.x + d.y * d.y;\n\n      if (typeof d.z !== \"undefined\") {\n        l += d.z * d.z;\n      }\n\n      return sqrt(l);\n    },\n    compute: function (t, points, _3d) {\n      // shortcuts\n      if (t === 0) {\n        return points[0];\n      }\n\n      var order = points.length - 1;\n\n      if (t === 1) {\n        return points[order];\n      }\n\n      var p = points;\n      var mt = 1 - t; // constant?\n\n      if (order === 0) {\n        return points[0];\n      } // linear?\n\n\n      if (order === 1) {\n        ret = {\n          x: mt * p[0].x + t * p[1].x,\n          y: mt * p[0].y + t * p[1].y\n        };\n\n        if (_3d) {\n          ret.z = mt * p[0].z + t * p[1].z;\n        }\n\n        return ret;\n      } // quadratic/cubic curve?\n\n\n      if (order < 4) {\n        var mt2 = mt * mt,\n            t2 = t * t,\n            a,\n            b,\n            c,\n            d = 0;\n\n        if (order === 2) {\n          p = [p[0], p[1], p[2], ZERO];\n          a = mt2;\n          b = mt * t * 2;\n          c = t2;\n        } else if (order === 3) {\n          a = mt2 * mt;\n          b = mt2 * t * 3;\n          c = mt * t2 * 3;\n          d = t * t2;\n        }\n\n        var ret = {\n          x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n          y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y\n        };\n\n        if (_3d) {\n          ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n        }\n\n        return ret;\n      } // higher order curves: use de Casteljau's computation\n\n\n      var dCpts = JSON.parse(JSON.stringify(points));\n\n      while (dCpts.length > 1) {\n        for (var i = 0; i < dCpts.length - 1; i++) {\n          dCpts[i] = {\n            x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n            y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\n          };\n\n          if (typeof dCpts[i].z !== \"undefined\") {\n            dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n          }\n        }\n\n        dCpts.splice(dCpts.length - 1, 1);\n      }\n\n      return dCpts[0];\n    },\n    computeWithRatios: function (t, points, ratios, _3d) {\n      var mt = 1 - t,\n          r = ratios,\n          p = points,\n          d;\n      var f1 = r[0],\n          f2 = r[1],\n          f3 = r[2],\n          f4 = r[3]; // spec for linear\n\n      f1 *= mt;\n      f2 *= t;\n\n      if (p.length === 2) {\n        d = f1 + f2;\n        return {\n          x: (f1 * p[0].x + f2 * p[1].x) / d,\n          y: (f1 * p[0].y + f2 * p[1].y) / d,\n          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d\n        };\n      } // upgrade to quadratic\n\n\n      f1 *= mt;\n      f2 *= 2 * mt;\n      f3 *= t * t;\n\n      if (p.length === 3) {\n        d = f1 + f2 + f3;\n        return {\n          x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n          y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d\n        };\n      } // upgrade to cubic\n\n\n      f1 *= mt;\n      f2 *= 1.5 * mt;\n      f3 *= 3 * mt;\n      f4 *= t * t * t;\n\n      if (p.length === 4) {\n        d = f1 + f2 + f3 + f4;\n        return {\n          x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n          y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d\n        };\n      }\n    },\n    derive: function (points, _3d) {\n      var dpoints = [];\n\n      for (var p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n        var list = [];\n\n        for (var j = 0, dpt; j < c; j++) {\n          dpt = {\n            x: c * (p[j + 1].x - p[j].x),\n            y: c * (p[j + 1].y - p[j].y)\n          };\n\n          if (_3d) {\n            dpt.z = c * (p[j + 1].z - p[j].z);\n          }\n\n          list.push(dpt);\n        }\n\n        dpoints.push(list);\n        p = list;\n      }\n\n      return dpoints;\n    },\n    between: function (v, m, M) {\n      return m <= v && v <= M || utils.approximately(v, m) || utils.approximately(v, M);\n    },\n    approximately: function (a, b, precision) {\n      return abs(a - b) <= (precision || epsilon);\n    },\n    length: function (derivativeFn) {\n      var z = 0.5,\n          sum = 0,\n          len = utils.Tvalues.length,\n          i,\n          t;\n\n      for (i = 0; i < len; i++) {\n        t = z * utils.Tvalues[i] + z;\n        sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n      }\n\n      return z * sum;\n    },\n    map: function (v, ds, de, ts, te) {\n      var d1 = de - ds,\n          d2 = te - ts,\n          v2 = v - ds,\n          r = v2 / d1;\n      return ts + d2 * r;\n    },\n    lerp: function (r, v1, v2) {\n      var ret = {\n        x: v1.x + r * (v2.x - v1.x),\n        y: v1.y + r * (v2.y - v1.y)\n      };\n\n      if (!!v1.z && !!v2.z) {\n        ret.z = v1.z + r * (v2.z - v1.z);\n      }\n\n      return ret;\n    },\n    pointToString: function (p) {\n      var s = p.x + \"/\" + p.y;\n\n      if (typeof p.z !== \"undefined\") {\n        s += \"/\" + p.z;\n      }\n\n      return s;\n    },\n    pointsToString: function (points) {\n      return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n    },\n    copy: function (obj) {\n      return JSON.parse(JSON.stringify(obj));\n    },\n    angle: function (o, v1, v2) {\n      var dx1 = v1.x - o.x,\n          dy1 = v1.y - o.y,\n          dx2 = v2.x - o.x,\n          dy2 = v2.y - o.y,\n          cross = dx1 * dy2 - dy1 * dx2,\n          dot = dx1 * dx2 + dy1 * dy2;\n      return atan2(cross, dot);\n    },\n    // round as string, to avoid rounding errors\n    round: function (v, d) {\n      var s = \"\" + v;\n      var pos = s.indexOf(\".\");\n      return parseFloat(s.substring(0, pos + 1 + d));\n    },\n    dist: function (p1, p2) {\n      var dx = p1.x - p2.x,\n          dy = p1.y - p2.y;\n      return sqrt(dx * dx + dy * dy);\n    },\n    closest: function (LUT, point) {\n      var mdist = pow(2, 63),\n          mpos,\n          d;\n      LUT.forEach(function (p, idx) {\n        d = utils.dist(point, p);\n\n        if (d < mdist) {\n          mdist = d;\n          mpos = idx;\n        }\n      });\n      return {\n        mdist: mdist,\n        mpos: mpos\n      };\n    },\n    abcratio: function (t, n) {\n      // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n !== 2 && n !== 3) {\n        return false;\n      }\n\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t === 0 || t === 1) {\n        return t;\n      }\n\n      var bottom = pow(t, n) + pow(1 - t, n),\n          top = bottom - 1;\n      return abs(top / bottom);\n    },\n    projectionratio: function (t, n) {\n      // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n !== 2 && n !== 3) {\n        return false;\n      }\n\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t === 0 || t === 1) {\n        return t;\n      }\n\n      var top = pow(1 - t, n),\n          bottom = pow(t, n) + top;\n      return top / bottom;\n    },\n    lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n      var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n          ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n          d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n      if (d == 0) {\n        return false;\n      }\n\n      return {\n        x: nx / d,\n        y: ny / d\n      };\n    },\n    lli4: function (p1, p2, p3, p4) {\n      var x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          x3 = p3.x,\n          y3 = p3.y,\n          x4 = p4.x,\n          y4 = p4.y;\n      return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n    },\n    lli: function (v1, v2) {\n      return utils.lli4(v1, v1.c, v2, v2.c);\n    },\n    makeline: function (p1, p2) {\n      var Bezier = require(\"./bezier\");\n\n      var x1 = p1.x,\n          y1 = p1.y,\n          x2 = p2.x,\n          y2 = p2.y,\n          dx = (x2 - x1) / 3,\n          dy = (y2 - y1) / 3;\n      return new Bezier(x1, y1, x1 + dx, y1 + dy, x1 + 2 * dx, y1 + 2 * dy, x2, y2);\n    },\n    findbbox: function (sections) {\n      var mx = nMax,\n          my = nMax,\n          MX = nMin,\n          MY = nMin;\n      sections.forEach(function (s) {\n        var bbox = s.bbox();\n        if (mx > bbox.x.min) mx = bbox.x.min;\n        if (my > bbox.y.min) my = bbox.y.min;\n        if (MX < bbox.x.max) MX = bbox.x.max;\n        if (MY < bbox.y.max) MY = bbox.y.max;\n      });\n      return {\n        x: {\n          min: mx,\n          mid: (mx + MX) / 2,\n          max: MX,\n          size: MX - mx\n        },\n        y: {\n          min: my,\n          mid: (my + MY) / 2,\n          max: MY,\n          size: MY - my\n        }\n      };\n    },\n    shapeintersections: function (s1, bbox1, s2, bbox2, curveIntersectionThreshold) {\n      if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n      var intersections = [];\n      var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n      var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n      a1.forEach(function (l1) {\n        if (l1.virtual) return;\n        a2.forEach(function (l2) {\n          if (l2.virtual) return;\n          var iss = l1.intersects(l2, curveIntersectionThreshold);\n\n          if (iss.length > 0) {\n            iss.c1 = l1;\n            iss.c2 = l2;\n            iss.s1 = s1;\n            iss.s2 = s2;\n            intersections.push(iss);\n          }\n        });\n      });\n      return intersections;\n    },\n    makeshape: function (forward, back, curveIntersectionThreshold) {\n      var bpl = back.points.length;\n      var fpl = forward.points.length;\n      var start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n      var end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n      var shape = {\n        startcap: start,\n        forward: forward,\n        back: back,\n        endcap: end,\n        bbox: utils.findbbox([start, forward, back, end])\n      };\n      var self = utils;\n\n      shape.intersections = function (s2) {\n        return self.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);\n      };\n\n      return shape;\n    },\n    getminmax: function (curve, d, list) {\n      if (!list) return {\n        min: 0,\n        max: 0\n      };\n      var min = nMax,\n          max = nMin,\n          t,\n          c;\n\n      if (list.indexOf(0) === -1) {\n        list = [0].concat(list);\n      }\n\n      if (list.indexOf(1) === -1) {\n        list.push(1);\n      }\n\n      for (var i = 0, len = list.length; i < len; i++) {\n        t = list[i];\n        c = curve.get(t);\n\n        if (c[d] < min) {\n          min = c[d];\n        }\n\n        if (c[d] > max) {\n          max = c[d];\n        }\n      }\n\n      return {\n        min: min,\n        mid: (min + max) / 2,\n        max: max,\n        size: max - min\n      };\n    },\n    align: function (points, line) {\n      var tx = line.p1.x,\n          ty = line.p1.y,\n          a = -atan2(line.p2.y - ty, line.p2.x - tx),\n          d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\n        };\n      };\n\n      return points.map(d);\n    },\n    roots: function (points, line) {\n      line = line || {\n        p1: {\n          x: 0,\n          y: 0\n        },\n        p2: {\n          x: 1,\n          y: 0\n        }\n      };\n      var order = points.length - 1;\n      var p = utils.align(points, line);\n\n      var reduce = function (t) {\n        return 0 <= t && t <= 1;\n      };\n\n      if (order === 2) {\n        var a = p[0].y,\n            b = p[1].y,\n            c = p[2].y,\n            d = a - 2 * b + c;\n\n        if (d !== 0) {\n          var m1 = -sqrt(b * b - a * c),\n              m2 = -a + b,\n              v1 = -(m1 + m2) / d,\n              v2 = -(-m1 + m2) / d;\n          return [v1, v2].filter(reduce);\n        } else if (b !== c && d === 0) {\n          return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n        }\n\n        return [];\n      } // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n\n\n      var pa = p[0].y,\n          pb = p[1].y,\n          pc = p[2].y,\n          pd = p[3].y,\n          d = -pa + 3 * pb - 3 * pc + pd,\n          a = 3 * pa - 6 * pb + 3 * pc,\n          b = -3 * pa + 3 * pb,\n          c = pa;\n\n      if (utils.approximately(d, 0)) {\n        // this is not a cubic curve.\n        if (utils.approximately(a, 0)) {\n          // in fact, this is not a quadratic curve either.\n          if (utils.approximately(b, 0)) {\n            // in fact in fact, there are no solutions.\n            return [];\n          } // linear solution:\n\n\n          return [-c / b].filter(reduce);\n        } // quadratic solution:\n\n\n        var q = sqrt(b * b - 4 * a * c),\n            a2 = 2 * a;\n        return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n      } // at this point, we know we need a cubic solution:\n\n\n      a /= d;\n      b /= d;\n      c /= d;\n      var p = (3 * b - a * a) / 3,\n          p3 = p / 3,\n          q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n          q2 = q / 2,\n          discriminant = q2 * q2 + p3 * p3 * p3,\n          u1,\n          v1,\n          x1,\n          x2,\n          x3;\n\n      if (discriminant < 0) {\n        var mp3 = -p / 3,\n            mp33 = mp3 * mp3 * mp3,\n            r = sqrt(mp33),\n            t = -q / (2 * r),\n            cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n            phi = acos(cosphi),\n            crtr = crt(r),\n            t1 = 2 * crtr;\n        x1 = t1 * cos(phi / 3) - a / 3;\n        x2 = t1 * cos((phi + tau) / 3) - a / 3;\n        x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n        return [x1, x2, x3].filter(reduce);\n      } else if (discriminant === 0) {\n        u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n        x1 = 2 * u1 - a / 3;\n        x2 = -u1 - a / 3;\n        return [x1, x2].filter(reduce);\n      } else {\n        var sd = sqrt(discriminant);\n        u1 = crt(-q2 + sd);\n        v1 = crt(q2 + sd);\n        return [u1 - v1 - a / 3].filter(reduce);\n      }\n    },\n    droots: function (p) {\n      // quadratic roots are easy\n      if (p.length === 3) {\n        var a = p[0],\n            b = p[1],\n            c = p[2],\n            d = a - 2 * b + c;\n\n        if (d !== 0) {\n          var m1 = -sqrt(b * b - a * c),\n              m2 = -a + b,\n              v1 = -(m1 + m2) / d,\n              v2 = -(-m1 + m2) / d;\n          return [v1, v2];\n        } else if (b !== c && d === 0) {\n          return [(2 * b - c) / (2 * (b - c))];\n        }\n\n        return [];\n      } // linear roots are even easier\n\n\n      if (p.length === 2) {\n        var a = p[0],\n            b = p[1];\n\n        if (a !== b) {\n          return [a / (a - b)];\n        }\n\n        return [];\n      }\n    },\n    curvature: function (t, points, _3d, kOnly) {\n      var dpoints = utils.derive(points);\n      var d1 = dpoints[0];\n      var d2 = dpoints[1];\n      var num,\n          dnm,\n          adk,\n          dk,\n          k = 0,\n          r = 0; //\n      // We're using the following formula for curvature:\n      //\n      //              x'y\" - y'x\"\n      //   k(t) = ------------------\n      //           (x'² + y'²)^(3/2)\n      //\n      // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n      //\n      // With it corresponding 3D counterpart:\n      //\n      //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n      //   k(t) = -------------------------------------------------------\n      //                     (x'² + y'² + z'²)^(3/2)\n      //\n\n      var d = utils.compute(t, d1);\n      var dd = utils.compute(t, d2);\n      var qdsum = d.x * d.x + d.y * d.y;\n\n      if (_3d) {\n        num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));\n        dnm = pow(qdsum + d.z * d.z, 3 / 2);\n      } else {\n        num = d.x * dd.y - d.y * dd.x;\n        dnm = pow(qdsum, 3 / 2);\n      }\n\n      if (num === 0 || dnm === 0) {\n        return {\n          k: 0,\n          r: 0\n        };\n      }\n\n      k = num / dnm;\n      r = dnm / num; // We're also computing the derivative of kappa, because\n      // there is value in knowing the rate of change for the\n      // curvature along the curve. And we're just going to\n      // ballpark it based on an epsilon.\n\n      if (!kOnly) {\n        // compute k'(t) based on the interval before, and after it,\n        // to at least try to not introduce forward/backward pass bias.\n        var pk = utils.curvature(t - 0.001, points, _3d, true).k;\n        var nk = utils.curvature(t + 0.001, points, _3d, true).k;\n        dk = (nk - k + (k - pk)) / 2;\n        adk = (abs(nk - k) + abs(k - pk)) / 2;\n      }\n\n      return {\n        k: k,\n        r: r,\n        dk: dk,\n        adk: adk\n      };\n    },\n    inflections: function (points) {\n      if (points.length < 4) return []; // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n      var p = utils.align(points, {\n        p1: points[0],\n        p2: points.slice(-1)[0]\n      }),\n          a = p[2].x * p[1].y,\n          b = p[3].x * p[1].y,\n          c = p[1].x * p[2].y,\n          d = p[3].x * p[2].y,\n          v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n          v2 = 18 * (3 * a - b - 3 * c),\n          v3 = 18 * (c - a);\n\n      if (utils.approximately(v1, 0)) {\n        if (!utils.approximately(v2, 0)) {\n          var t = -v3 / v2;\n          if (0 <= t && t <= 1) return [t];\n        }\n\n        return [];\n      }\n\n      var trm = v2 * v2 - 4 * v1 * v3,\n          sq = Math.sqrt(trm),\n          d = 2 * v1;\n      if (utils.approximately(d, 0)) return [];\n      return [(sq - v2) / d, -(v2 + sq) / d].filter(function (r) {\n        return 0 <= r && r <= 1;\n      });\n    },\n    bboxoverlap: function (b1, b2) {\n      var dims = [\"x\", \"y\"],\n          len = dims.length,\n          i,\n          dim,\n          l,\n          t,\n          d;\n\n      for (i = 0; i < len; i++) {\n        dim = dims[i];\n        l = b1[dim].mid;\n        t = b2[dim].mid;\n        d = (b1[dim].size + b2[dim].size) / 2;\n        if (abs(l - t) >= d) return false;\n      }\n\n      return true;\n    },\n    expandbox: function (bbox, _bbox) {\n      if (_bbox.x.min < bbox.x.min) {\n        bbox.x.min = _bbox.x.min;\n      }\n\n      if (_bbox.y.min < bbox.y.min) {\n        bbox.y.min = _bbox.y.min;\n      }\n\n      if (_bbox.z && _bbox.z.min < bbox.z.min) {\n        bbox.z.min = _bbox.z.min;\n      }\n\n      if (_bbox.x.max > bbox.x.max) {\n        bbox.x.max = _bbox.x.max;\n      }\n\n      if (_bbox.y.max > bbox.y.max) {\n        bbox.y.max = _bbox.y.max;\n      }\n\n      if (_bbox.z && _bbox.z.max > bbox.z.max) {\n        bbox.z.max = _bbox.z.max;\n      }\n\n      bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n      bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n\n      if (bbox.z) {\n        bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n      }\n\n      bbox.x.size = bbox.x.max - bbox.x.min;\n      bbox.y.size = bbox.y.max - bbox.y.min;\n\n      if (bbox.z) {\n        bbox.z.size = bbox.z.max - bbox.z.min;\n      }\n    },\n    pairiteration: function (c1, c2, curveIntersectionThreshold) {\n      var c1b = c1.bbox(),\n          c2b = c2.bbox(),\n          r = 100000,\n          threshold = curveIntersectionThreshold || 0.5;\n\n      if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {\n        return [(r * (c1._t1 + c1._t2) / 2 | 0) / r + \"/\" + (r * (c2._t1 + c2._t2) / 2 | 0) / r];\n      }\n\n      var cc1 = c1.split(0.5),\n          cc2 = c2.split(0.5),\n          pairs = [{\n        left: cc1.left,\n        right: cc2.left\n      }, {\n        left: cc1.left,\n        right: cc2.right\n      }, {\n        left: cc1.right,\n        right: cc2.right\n      }, {\n        left: cc1.right,\n        right: cc2.left\n      }];\n      pairs = pairs.filter(function (pair) {\n        return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n      });\n      var results = [];\n      if (pairs.length === 0) return results;\n      pairs.forEach(function (pair) {\n        results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));\n      });\n      results = results.filter(function (v, i) {\n        return results.indexOf(v) === i;\n      });\n      return results;\n    },\n    getccenter: function (p1, p2, p3) {\n      var dx1 = p2.x - p1.x,\n          dy1 = p2.y - p1.y,\n          dx2 = p3.x - p2.x,\n          dy2 = p3.y - p2.y;\n      var dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n          dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n          dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n          dy2p = dx2 * sin(quart) + dy2 * cos(quart); // chord midpoints\n\n      var mx1 = (p1.x + p2.x) / 2,\n          my1 = (p1.y + p2.y) / 2,\n          mx2 = (p2.x + p3.x) / 2,\n          my2 = (p2.y + p3.y) / 2; // midpoint offsets\n\n      var mx1n = mx1 + dx1p,\n          my1n = my1 + dy1p,\n          mx2n = mx2 + dx2p,\n          my2n = my2 + dy2p; // intersection of these lines:\n\n      var arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n          r = utils.dist(arc, p1),\n          // arc start/end values, over mid point:\n      s = atan2(p1.y - arc.y, p1.x - arc.x),\n          m = atan2(p2.y - arc.y, p2.x - arc.x),\n          e = atan2(p3.y - arc.y, p3.x - arc.x),\n          _; // determine arc direction (cw/ccw correction)\n\n\n      if (s < e) {\n        // if s<m<e, arc(s, e)\n        // if m<s<e, arc(e, s + tau)\n        // if s<e<m, arc(e, s + tau)\n        if (s > m || m > e) {\n          s += tau;\n        }\n\n        if (s > e) {\n          _ = e;\n          e = s;\n          s = _;\n        }\n      } else {\n        // if e<m<s, arc(e, s)\n        // if m<e<s, arc(s, e + tau)\n        // if e<s<m, arc(s, e + tau)\n        if (e < m && m < s) {\n          _ = e;\n          e = s;\n          s = _;\n        } else {\n          e += tau;\n        }\n      } // assign and done.\n\n\n      arc.s = s;\n      arc.e = e;\n      arc.r = r;\n      return arc;\n    },\n    numberSort: function (a, b) {\n      return a - b;\n    }\n  };\n  module.exports = utils;\n})();","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/node_modules/bezier-js/lib/utils.js"],"names":["abs","Math","cos","sin","acos","atan2","sqrt","pow","crt","v","pi","PI","tau","quart","epsilon","nMax","Number","MAX_SAFE_INTEGER","nMin","MIN_SAFE_INTEGER","ZERO","x","y","z","utils","Tvalues","Cvalues","arcfn","t","derivativeFn","d","l","compute","points","_3d","order","length","p","mt","ret","mt2","t2","a","b","c","dCpts","JSON","parse","stringify","i","splice","computeWithRatios","ratios","r","f1","f2","f3","f4","derive","dpoints","list","j","dpt","push","between","m","M","approximately","precision","sum","len","map","ds","de","ts","te","d1","d2","v2","lerp","v1","pointToString","s","pointsToString","join","copy","obj","angle","o","dx1","dy1","dx2","dy2","cross","dot","round","pos","indexOf","parseFloat","substring","dist","p1","p2","dx","dy","closest","LUT","point","mdist","mpos","forEach","idx","abcratio","n","bottom","top","projectionratio","lli8","x1","y1","x2","y2","x3","y3","x4","y4","nx","ny","lli4","p3","p4","lli","makeline","Bezier","require","findbbox","sections","mx","my","MX","MY","bbox","min","max","mid","size","shapeintersections","s1","bbox1","s2","bbox2","curveIntersectionThreshold","bboxoverlap","intersections","a1","startcap","forward","back","endcap","a2","l1","virtual","l2","iss","intersects","c1","c2","makeshape","bpl","fpl","start","end","shape","self","getminmax","curve","concat","get","align","line","tx","ty","roots","reduce","m1","m2","filter","pa","pb","pc","pd","q","q2","discriminant","u1","mp3","mp33","cosphi","phi","crtr","t1","sd","droots","curvature","kOnly","num","dnm","adk","dk","k","dd","qdsum","pk","nk","inflections","slice","v3","trm","sq","b1","b2","dims","dim","expandbox","_bbox","pairiteration","c1b","c2b","threshold","_t1","_t2","cc1","split","cc2","pairs","left","right","pair","results","getccenter","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n","arc","e","_","numberSort","module","exports"],"mappings":"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","sourcesContent":["(function() {\n  \"use strict\";\n\n  // math-inlining.\n  var abs = Math.abs,\n    cos = Math.cos,\n    sin = Math.sin,\n    acos = Math.acos,\n    atan2 = Math.atan2,\n    sqrt = Math.sqrt,\n    pow = Math.pow,\n    // cube root function yielding real roots\n    crt = function(v) {\n      return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n    },\n    // trig constants\n    pi = Math.PI,\n    tau = 2 * pi,\n    quart = pi / 2,\n    // float precision significant decimal\n    epsilon = 0.000001,\n    // extremas used in bbox calculation and similar algorithms\n    nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n    nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n    // a zero coordinate, which is surprisingly useful\n    ZERO = { x: 0, y: 0, z: 0 };\n\n  // Bezier utility functions\n  var utils = {\n    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n    Tvalues: [\n      -0.0640568928626056260850430826247450385909,\n      0.0640568928626056260850430826247450385909,\n      -0.1911188674736163091586398207570696318404,\n      0.1911188674736163091586398207570696318404,\n      -0.3150426796961633743867932913198102407864,\n      0.3150426796961633743867932913198102407864,\n      -0.4337935076260451384870842319133497124524,\n      0.4337935076260451384870842319133497124524,\n      -0.5454214713888395356583756172183723700107,\n      0.5454214713888395356583756172183723700107,\n      -0.6480936519369755692524957869107476266696,\n      0.6480936519369755692524957869107476266696,\n      -0.7401241915785543642438281030999784255232,\n      0.7401241915785543642438281030999784255232,\n      -0.8200019859739029219539498726697452080761,\n      0.8200019859739029219539498726697452080761,\n      -0.8864155270044010342131543419821967550873,\n      0.8864155270044010342131543419821967550873,\n      -0.9382745520027327585236490017087214496548,\n      0.9382745520027327585236490017087214496548,\n      -0.9747285559713094981983919930081690617411,\n      0.9747285559713094981983919930081690617411,\n      -0.9951872199970213601799974097007368118745,\n      0.9951872199970213601799974097007368118745\n    ],\n\n    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n    Cvalues: [\n      0.1279381953467521569740561652246953718517,\n      0.1279381953467521569740561652246953718517,\n      0.1258374563468282961213753825111836887264,\n      0.1258374563468282961213753825111836887264,\n      0.121670472927803391204463153476262425607,\n      0.121670472927803391204463153476262425607,\n      0.1155056680537256013533444839067835598622,\n      0.1155056680537256013533444839067835598622,\n      0.1074442701159656347825773424466062227946,\n      0.1074442701159656347825773424466062227946,\n      0.0976186521041138882698806644642471544279,\n      0.0976186521041138882698806644642471544279,\n      0.086190161531953275917185202983742667185,\n      0.086190161531953275917185202983742667185,\n      0.0733464814110803057340336152531165181193,\n      0.0733464814110803057340336152531165181193,\n      0.0592985849154367807463677585001085845412,\n      0.0592985849154367807463677585001085845412,\n      0.0442774388174198061686027482113382288593,\n      0.0442774388174198061686027482113382288593,\n      0.0285313886289336631813078159518782864491,\n      0.0285313886289336631813078159518782864491,\n      0.0123412297999871995468056670700372915759,\n      0.0123412297999871995468056670700372915759\n    ],\n\n    arcfn: function(t, derivativeFn) {\n      var d = derivativeFn(t);\n      var l = d.x * d.x + d.y * d.y;\n      if (typeof d.z !== \"undefined\") {\n        l += d.z * d.z;\n      }\n      return sqrt(l);\n    },\n\n    compute: function(t, points, _3d) {\n      // shortcuts\n      if (t === 0) {\n        return points[0];\n      }\n\n      var order = points.length-1;\n\n      if (t === 1) {\n        return points[order];\n      }\n\n      var p = points;\n      var mt = 1 - t;\n\n      // constant?\n      if (order === 0) {\n        return points[0];\n      }\n\n      // linear?\n      if (order === 1) {\n        ret = {\n          x: mt * p[0].x + t * p[1].x,\n          y: mt * p[0].y + t * p[1].y\n        };\n        if (_3d) {\n          ret.z = mt * p[0].z + t * p[1].z;\n        }\n        return ret;\n      }\n\n      // quadratic/cubic curve?\n      if (order < 4) {\n        var mt2 = mt * mt,\n          t2 = t * t,\n          a,\n          b,\n          c,\n          d = 0;\n        if (order === 2) {\n          p = [p[0], p[1], p[2], ZERO];\n          a = mt2;\n          b = mt * t * 2;\n          c = t2;\n        } else if (order === 3) {\n          a = mt2 * mt;\n          b = mt2 * t * 3;\n          c = mt * t2 * 3;\n          d = t * t2;\n        }\n        var ret = {\n          x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n          y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y\n        };\n        if (_3d) {\n          ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n        }\n        return ret;\n      }\n\n      // higher order curves: use de Casteljau's computation\n      var dCpts = JSON.parse(JSON.stringify(points));\n      while (dCpts.length > 1) {\n        for (var i = 0; i < dCpts.length - 1; i++) {\n          dCpts[i] = {\n            x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n            y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\n          };\n          if (typeof dCpts[i].z !== \"undefined\") {\n            dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n          }\n        }\n        dCpts.splice(dCpts.length - 1, 1);\n      }\n      return dCpts[0];\n    },\n\n    computeWithRatios: function (t, points, ratios, _3d) {\n      var mt = 1 - t, r = ratios, p = points, d;\n      var f1 = r[0], f2 = r[1], f3 = r[2], f4 = r[3];\n\n      // spec for linear\n      f1 *= mt;\n      f2 *= t;\n\n      if (p.length === 2) {\n        d = f1 + f2;\n        return {\n          x: (f1 * p[0].x + f2 * p[1].x)/d,\n          y: (f1 * p[0].y + f2 * p[1].y)/d,\n          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z)/d\n        };\n      }\n\n      // upgrade to quadratic\n      f1 *= mt;\n      f2 *= 2 * mt;\n      f3 *= t * t;\n\n      if (p.length === 3) {\n        d = f1 + f2 + f3;\n        return {\n          x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x)/d,\n          y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y)/d,\n          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z)/d\n        };\n      }\n\n      // upgrade to cubic\n      f1 *= mt;\n      f2 *= 1.5 * mt;\n      f3 *= 3 * mt;\n      f4 *= t * t * t;\n\n      if (p.length === 4) {\n        d = f1 + f2 + f3 + f4;\n        return {\n          x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x)/d,\n          y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y)/d,\n          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z)/d\n        };\n      }\n    },\n\n    derive: function (points, _3d) {\n      var dpoints = [];\n      for (var p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n        var list = [];\n        for (var j = 0, dpt; j < c; j++) {\n          dpt = {\n            x: c * (p[j + 1].x - p[j].x),\n            y: c * (p[j + 1].y - p[j].y)\n          };\n          if (_3d) {\n            dpt.z = c * (p[j + 1].z - p[j].z);\n          }\n          list.push(dpt);\n        }\n        dpoints.push(list);\n        p = list;\n      }\n      return dpoints;\n    },\n\n    between: function(v, m, M) {\n      return (\n        (m <= v && v <= M) ||\n        utils.approximately(v, m) ||\n        utils.approximately(v, M)\n      );\n    },\n\n    approximately: function(a, b, precision) {\n      return abs(a - b) <= (precision || epsilon);\n    },\n\n    length: function(derivativeFn) {\n      var z = 0.5,\n        sum = 0,\n        len = utils.Tvalues.length,\n        i,\n        t;\n      for (i = 0; i < len; i++) {\n        t = z * utils.Tvalues[i] + z;\n        sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n      }\n      return z * sum;\n    },\n\n    map: function(v, ds, de, ts, te) {\n      var d1 = de - ds,\n        d2 = te - ts,\n        v2 = v - ds,\n        r = v2 / d1;\n      return ts + d2 * r;\n    },\n\n    lerp: function(r, v1, v2) {\n      var ret = {\n        x: v1.x + r * (v2.x - v1.x),\n        y: v1.y + r * (v2.y - v1.y)\n      };\n      if (!!v1.z && !!v2.z) {\n        ret.z = v1.z + r * (v2.z - v1.z);\n      }\n      return ret;\n    },\n\n    pointToString: function(p) {\n      var s = p.x + \"/\" + p.y;\n      if (typeof p.z !== \"undefined\") {\n        s += \"/\" + p.z;\n      }\n      return s;\n    },\n\n    pointsToString: function(points) {\n      return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n    },\n\n    copy: function(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    },\n\n    angle: function(o, v1, v2) {\n      var dx1 = v1.x - o.x,\n        dy1 = v1.y - o.y,\n        dx2 = v2.x - o.x,\n        dy2 = v2.y - o.y,\n        cross = dx1 * dy2 - dy1 * dx2,\n        dot = dx1 * dx2 + dy1 * dy2;\n      return atan2(cross, dot);\n    },\n\n    // round as string, to avoid rounding errors\n    round: function(v, d) {\n      var s = \"\" + v;\n      var pos = s.indexOf(\".\");\n      return parseFloat(s.substring(0, pos + 1 + d));\n    },\n\n    dist: function(p1, p2) {\n      var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n      return sqrt(dx * dx + dy * dy);\n    },\n\n    closest: function(LUT, point) {\n      var mdist = pow(2, 63),\n        mpos,\n        d;\n      LUT.forEach(function(p, idx) {\n        d = utils.dist(point, p);\n        if (d < mdist) {\n          mdist = d;\n          mpos = idx;\n        }\n      });\n      return { mdist: mdist, mpos: mpos };\n    },\n\n    abcratio: function(t, n) {\n      // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n !== 2 && n !== 3) {\n        return false;\n      }\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t === 0 || t === 1) {\n        return t;\n      }\n      var bottom = pow(t, n) + pow(1 - t, n),\n        top = bottom - 1;\n      return abs(top / bottom);\n    },\n\n    projectionratio: function(t, n) {\n      // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n      if (n !== 2 && n !== 3) {\n        return false;\n      }\n      if (typeof t === \"undefined\") {\n        t = 0.5;\n      } else if (t === 0 || t === 1) {\n        return t;\n      }\n      var top = pow(1 - t, n),\n        bottom = pow(t, n) + top;\n      return top / bottom;\n    },\n\n    lli8: function(x1, y1, x2, y2, x3, y3, x4, y4) {\n      var nx =\n          (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n        ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n        d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n      if (d == 0) {\n        return false;\n      }\n      return { x: nx / d, y: ny / d };\n    },\n\n    lli4: function(p1, p2, p3, p4) {\n      var x1 = p1.x,\n        y1 = p1.y,\n        x2 = p2.x,\n        y2 = p2.y,\n        x3 = p3.x,\n        y3 = p3.y,\n        x4 = p4.x,\n        y4 = p4.y;\n      return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n    },\n\n    lli: function(v1, v2) {\n      return utils.lli4(v1, v1.c, v2, v2.c);\n    },\n\n    makeline: function(p1, p2) {\n      var Bezier = require(\"./bezier\");\n      var x1 = p1.x,\n        y1 = p1.y,\n        x2 = p2.x,\n        y2 = p2.y,\n        dx = (x2 - x1) / 3,\n        dy = (y2 - y1) / 3;\n      return new Bezier(\n        x1,\n        y1,\n        x1 + dx,\n        y1 + dy,\n        x1 + 2 * dx,\n        y1 + 2 * dy,\n        x2,\n        y2\n      );\n    },\n\n    findbbox: function(sections) {\n      var mx = nMax,\n        my = nMax,\n        MX = nMin,\n        MY = nMin;\n      sections.forEach(function(s) {\n        var bbox = s.bbox();\n        if (mx > bbox.x.min) mx = bbox.x.min;\n        if (my > bbox.y.min) my = bbox.y.min;\n        if (MX < bbox.x.max) MX = bbox.x.max;\n        if (MY < bbox.y.max) MY = bbox.y.max;\n      });\n      return {\n        x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n        y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my }\n      };\n    },\n\n    shapeintersections: function(\n      s1,\n      bbox1,\n      s2,\n      bbox2,\n      curveIntersectionThreshold\n    ) {\n      if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n      var intersections = [];\n      var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n      var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n      a1.forEach(function(l1) {\n        if (l1.virtual) return;\n        a2.forEach(function(l2) {\n          if (l2.virtual) return;\n          var iss = l1.intersects(l2, curveIntersectionThreshold);\n          if (iss.length > 0) {\n            iss.c1 = l1;\n            iss.c2 = l2;\n            iss.s1 = s1;\n            iss.s2 = s2;\n            intersections.push(iss);\n          }\n        });\n      });\n      return intersections;\n    },\n\n    makeshape: function(forward, back, curveIntersectionThreshold) {\n      var bpl = back.points.length;\n      var fpl = forward.points.length;\n      var start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n      var end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n      var shape = {\n        startcap: start,\n        forward: forward,\n        back: back,\n        endcap: end,\n        bbox: utils.findbbox([start, forward, back, end])\n      };\n      var self = utils;\n      shape.intersections = function(s2) {\n        return self.shapeintersections(\n          shape,\n          shape.bbox,\n          s2,\n          s2.bbox,\n          curveIntersectionThreshold\n        );\n      };\n      return shape;\n    },\n\n    getminmax: function(curve, d, list) {\n      if (!list) return { min: 0, max: 0 };\n      var min = nMax,\n        max = nMin,\n        t,\n        c;\n      if (list.indexOf(0) === -1) {\n        list = [0].concat(list);\n      }\n      if (list.indexOf(1) === -1) {\n        list.push(1);\n      }\n      for (var i = 0, len = list.length; i < len; i++) {\n        t = list[i];\n        c = curve.get(t);\n        if (c[d] < min) {\n          min = c[d];\n        }\n        if (c[d] > max) {\n          max = c[d];\n        }\n      }\n      return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n    },\n\n    align: function(points, line) {\n      var tx = line.p1.x,\n        ty = line.p1.y,\n        a = -atan2(line.p2.y - ty, line.p2.x - tx),\n        d = function(v) {\n          return {\n            x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n            y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\n          };\n        };\n      return points.map(d);\n    },\n\n    roots: function(points, line) {\n      line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n      var order = points.length - 1;\n      var p = utils.align(points, line);\n      var reduce = function(t) {\n        return 0 <= t && t <= 1;\n      };\n\n      if (order === 2) {\n        var a = p[0].y,\n          b = p[1].y,\n          c = p[2].y,\n          d = a - 2 * b + c;\n        if (d !== 0) {\n          var m1 = -sqrt(b * b - a * c),\n            m2 = -a + b,\n            v1 = -(m1 + m2) / d,\n            v2 = -(-m1 + m2) / d;\n          return [v1, v2].filter(reduce);\n        } else if (b !== c && d === 0) {\n          return [(2*b - c)/(2*b - 2*c)].filter(reduce);\n        }\n        return [];\n      }\n\n      // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n      var pa = p[0].y,\n        pb = p[1].y,\n        pc = p[2].y,\n        pd = p[3].y,\n        d = -pa + 3 * pb - 3 * pc + pd,\n        a = 3 * pa - 6 * pb + 3 * pc,\n        b = -3 * pa + 3 * pb,\n        c = pa;\n\n      if (utils.approximately(d, 0)) {\n        // this is not a cubic curve.\n        if (utils.approximately(a, 0)) {\n          // in fact, this is not a quadratic curve either.\n          if (utils.approximately(b, 0)) {\n            // in fact in fact, there are no solutions.\n            return [];\n          }\n          // linear solution:\n          return [-c / b].filter(reduce);\n        }\n        // quadratic solution:\n        var q = sqrt(b * b - 4 * a * c),\n          a2 = 2 * a;\n        return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n      }\n\n      // at this point, we know we need a cubic solution:\n\n      a /= d;\n      b /= d;\n      c /= d;\n\n      var p = (3 * b - a * a) / 3,\n        p3 = p / 3,\n        q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n        q2 = q / 2,\n        discriminant = q2 * q2 + p3 * p3 * p3,\n        u1,\n        v1,\n        x1,\n        x2,\n        x3;\n      if (discriminant < 0) {\n        var mp3 = -p / 3,\n          mp33 = mp3 * mp3 * mp3,\n          r = sqrt(mp33),\n          t = -q / (2 * r),\n          cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n          phi = acos(cosphi),\n          crtr = crt(r),\n          t1 = 2 * crtr;\n        x1 = t1 * cos(phi / 3) - a / 3;\n        x2 = t1 * cos((phi + tau) / 3) - a / 3;\n        x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n        return [x1, x2, x3].filter(reduce);\n      } else if (discriminant === 0) {\n        u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n        x1 = 2 * u1 - a / 3;\n        x2 = -u1 - a / 3;\n        return [x1, x2].filter(reduce);\n      } else {\n        var sd = sqrt(discriminant);\n        u1 = crt(-q2 + sd);\n        v1 = crt(q2 + sd);\n        return [u1 - v1 - a / 3].filter(reduce);\n      }\n    },\n\n    droots: function(p) {\n      // quadratic roots are easy\n      if (p.length === 3) {\n        var a = p[0],\n          b = p[1],\n          c = p[2],\n          d = a - 2 * b + c;\n        if (d !== 0) {\n          var m1 = -sqrt(b * b - a * c),\n            m2 = -a + b,\n            v1 = -(m1 + m2) / d,\n            v2 = -(-m1 + m2) / d;\n          return [v1, v2];\n        } else if (b !== c && d === 0) {\n          return [(2 * b - c) / (2 * (b - c))];\n        }\n        return [];\n      }\n\n      // linear roots are even easier\n      if (p.length === 2) {\n        var a = p[0],\n          b = p[1];\n        if (a !== b) {\n          return [a / (a - b)];\n        }\n        return [];\n      }\n    },\n\n    curvature: function(t, points, _3d, kOnly) {\n      var dpoints = utils.derive(points);\n      var d1 = dpoints[0];\n      var d2 = dpoints[1];\n      var num, dnm, adk, dk, k=0, r=0;\n\n      //\n      // We're using the following formula for curvature:\n      //\n      //              x'y\" - y'x\"\n      //   k(t) = ------------------\n      //           (x'² + y'²)^(3/2)\n      //\n      // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n      //\n      // With it corresponding 3D counterpart:\n      //\n      //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n      //   k(t) = -------------------------------------------------------\n      //                     (x'² + y'² + z'²)^(3/2)\n      //\n\n      var d = utils.compute(t, d1);\n      var dd = utils.compute(t, d2);\n      var qdsum = d.x*d.x + d.y*d.y;\n      if (_3d) {\n        num = sqrt(\n          pow(d.y*dd.z - dd.y*d.z, 2) +\n          pow(d.z*dd.x - dd.z*d.x, 2) +\n          pow(d.x*dd.y - dd.x*d.y, 2)\n        );\n        dnm = pow(qdsum + d.z*d.z, 3/2);\n      } else {\n        num = d.x*dd.y - d.y*dd.x;\n        dnm = pow(qdsum, 3/2);\n      }\n\n      if (num === 0 || dnm === 0) {\n        return { k:0, r:0 };\n      }\n\n      k = num/dnm;\n      r = dnm/num;\n\n      // We're also computing the derivative of kappa, because\n      // there is value in knowing the rate of change for the\n      // curvature along the curve. And we're just going to\n      // ballpark it based on an epsilon.\n      if (!kOnly) {\n        // compute k'(t) based on the interval before, and after it,\n        // to at least try to not introduce forward/backward pass bias.\n        var pk = utils.curvature(t-0.001, points, _3d, true).k;\n        var nk = utils.curvature(t+0.001, points, _3d, true).k;\n        dk = ((nk-k) + (k-pk))/2;\n        adk = (abs(nk-k) + abs(k-pk))/2;\n      }\n\n      return { k: k, r: r, dk: dk, adk:adk, };\n    },\n\n    inflections: function(points) {\n      if (points.length < 4) return [];\n\n      // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n      var p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n        a = p[2].x * p[1].y,\n        b = p[3].x * p[1].y,\n        c = p[1].x * p[2].y,\n        d = p[3].x * p[2].y,\n        v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n        v2 = 18 * (3 * a - b - 3 * c),\n        v3 = 18 * (c - a);\n\n      if (utils.approximately(v1, 0)) {\n        if (!utils.approximately(v2, 0)) {\n          var t = -v3 / v2;\n          if (0 <= t && t <= 1) return [t];\n        }\n        return [];\n      }\n\n      var trm = v2 * v2 - 4 * v1 * v3,\n        sq = Math.sqrt(trm),\n        d = 2 * v1;\n\n      if (utils.approximately(d, 0)) return [];\n\n      return [(sq - v2) / d, -(v2 + sq) / d].filter(function(r) {\n        return 0 <= r && r <= 1;\n      });\n    },\n\n    bboxoverlap: function(b1, b2) {\n      var dims = [\"x\", \"y\"],\n        len = dims.length,\n        i,\n        dim,\n        l,\n        t,\n        d;\n      for (i = 0; i < len; i++) {\n        dim = dims[i];\n        l = b1[dim].mid;\n        t = b2[dim].mid;\n        d = (b1[dim].size + b2[dim].size) / 2;\n        if (abs(l - t) >= d) return false;\n      }\n      return true;\n    },\n\n    expandbox: function(bbox, _bbox) {\n      if (_bbox.x.min < bbox.x.min) {\n        bbox.x.min = _bbox.x.min;\n      }\n      if (_bbox.y.min < bbox.y.min) {\n        bbox.y.min = _bbox.y.min;\n      }\n      if (_bbox.z && _bbox.z.min < bbox.z.min) {\n        bbox.z.min = _bbox.z.min;\n      }\n      if (_bbox.x.max > bbox.x.max) {\n        bbox.x.max = _bbox.x.max;\n      }\n      if (_bbox.y.max > bbox.y.max) {\n        bbox.y.max = _bbox.y.max;\n      }\n      if (_bbox.z && _bbox.z.max > bbox.z.max) {\n        bbox.z.max = _bbox.z.max;\n      }\n      bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n      bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n      if (bbox.z) {\n        bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n      }\n      bbox.x.size = bbox.x.max - bbox.x.min;\n      bbox.y.size = bbox.y.max - bbox.y.min;\n      if (bbox.z) {\n        bbox.z.size = bbox.z.max - bbox.z.min;\n      }\n    },\n\n    pairiteration: function(c1, c2, curveIntersectionThreshold) {\n      var c1b = c1.bbox(),\n        c2b = c2.bbox(),\n        r = 100000,\n        threshold = curveIntersectionThreshold || 0.5;\n      if (\n        c1b.x.size + c1b.y.size < threshold &&\n        c2b.x.size + c2b.y.size < threshold\n      ) {\n        return [\n          ((r * (c1._t1 + c1._t2) / 2) | 0) / r +\n            \"/\" +\n            ((r * (c2._t1 + c2._t2) / 2) | 0) / r\n        ];\n      }\n      var cc1 = c1.split(0.5),\n        cc2 = c2.split(0.5),\n        pairs = [\n          { left: cc1.left, right: cc2.left },\n          { left: cc1.left, right: cc2.right },\n          { left: cc1.right, right: cc2.right },\n          { left: cc1.right, right: cc2.left }\n        ];\n      pairs = pairs.filter(function(pair) {\n        return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n      });\n      var results = [];\n      if (pairs.length === 0) return results;\n      pairs.forEach(function(pair) {\n        results = results.concat(\n          utils.pairiteration(pair.left, pair.right, threshold)\n        );\n      });\n      results = results.filter(function(v, i) {\n        return results.indexOf(v) === i;\n      });\n      return results;\n    },\n\n    getccenter: function(p1, p2, p3) {\n      var dx1 = p2.x - p1.x,\n        dy1 = p2.y - p1.y,\n        dx2 = p3.x - p2.x,\n        dy2 = p3.y - p2.y;\n      var dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n        dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n        dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n        dy2p = dx2 * sin(quart) + dy2 * cos(quart);\n      // chord midpoints\n      var mx1 = (p1.x + p2.x) / 2,\n        my1 = (p1.y + p2.y) / 2,\n        mx2 = (p2.x + p3.x) / 2,\n        my2 = (p2.y + p3.y) / 2;\n      // midpoint offsets\n      var mx1n = mx1 + dx1p,\n        my1n = my1 + dy1p,\n        mx2n = mx2 + dx2p,\n        my2n = my2 + dy2p;\n      // intersection of these lines:\n      var arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n        r = utils.dist(arc, p1),\n        // arc start/end values, over mid point:\n        s = atan2(p1.y - arc.y, p1.x - arc.x),\n        m = atan2(p2.y - arc.y, p2.x - arc.x),\n        e = atan2(p3.y - arc.y, p3.x - arc.x),\n        _;\n      // determine arc direction (cw/ccw correction)\n      if (s < e) {\n        // if s<m<e, arc(s, e)\n        // if m<s<e, arc(e, s + tau)\n        // if s<e<m, arc(e, s + tau)\n        if (s > m || m > e) {\n          s += tau;\n        }\n        if (s > e) {\n          _ = e;\n          e = s;\n          s = _;\n        }\n      } else {\n        // if e<m<s, arc(e, s)\n        // if m<e<s, arc(s, e + tau)\n        // if e<s<m, arc(s, e + tau)\n        if (e < m && m < s) {\n          _ = e;\n          e = s;\n          s = _;\n        } else {\n          e += tau;\n        }\n      }\n      // assign and done.\n      arc.s = s;\n      arc.e = e;\n      arc.r = r;\n      return arc;\n    },\n\n    numberSort: function(a, b) {\n      return a - b;\n    }\n  };\n\n  module.exports = utils;\n})();\n"]},"metadata":{},"sourceType":"script"}