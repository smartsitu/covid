{"ast":null,"code":"var normalise = require(\"./normalise-svg.js\");\n\nvar M = {\n  x: false,\n  y: false\n};\n\nfunction makeBezier(Bezier, term, values) {\n  if (term === 'Z') return;\n\n  if (term === 'M') {\n    M = {\n      x: values[0],\n      y: values[1]\n    };\n    return;\n  } // ES7: new Bezier(M.x, M.y, ...values)\n\n\n  var cvalues = [false, M.x, M.y].concat(values);\n  var PreboundConstructor = Bezier.bind.apply(Bezier, cvalues);\n  var curve = new PreboundConstructor();\n  var last = values.slice(-2);\n  M = {\n    x: last[0],\n    y: last[1]\n  };\n  return curve;\n}\n\nfunction convertPath(Bezier, d) {\n  var terms = normalise(d).split(\" \"),\n      term,\n      matcher = new RegExp(\"[MLCQZ]\", \"\"),\n      segment,\n      values,\n      segments = [],\n      ARGS = {\n    \"C\": 6,\n    \"Q\": 4,\n    \"L\": 2,\n    \"M\": 2\n  };\n\n  while (terms.length) {\n    term = terms.splice(0, 1)[0];\n\n    if (matcher.test(term)) {\n      values = terms.splice(0, ARGS[term]).map(parseFloat);\n      segment = makeBezier(Bezier, term, values);\n      if (segment) segments.push(segment);\n    }\n  }\n\n  return new Bezier.PolyBezier(segments);\n}\n\nmodule.exports = convertPath;","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/node_modules/bezier-js/lib/svg-to-beziers.js"],"names":["normalise","require","M","x","y","makeBezier","Bezier","term","values","cvalues","concat","PreboundConstructor","bind","apply","curve","last","slice","convertPath","d","terms","split","matcher","RegExp","segment","segments","ARGS","length","splice","test","map","parseFloat","push","PolyBezier","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,CAAC,GAAG;AAAEC,EAAAA,CAAC,EAAE,KAAL;AAAYC,EAAAA,CAAC,EAAE;AAAf,CAAR;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;AACxC,MAAID,IAAI,KAAK,GAAb,EAAkB;;AAClB,MAAIA,IAAI,KAAK,GAAb,EAAkB;AAChBL,IAAAA,CAAC,GAAG;AAACC,MAAAA,CAAC,EAAEK,MAAM,CAAC,CAAD,CAAV;AAAeJ,MAAAA,CAAC,EAAEI,MAAM,CAAC,CAAD;AAAxB,KAAJ;AACA;AACD,GALuC,CAMxC;;;AACA,MAAIC,OAAO,GAAG,CAAC,KAAD,EAAQP,CAAC,CAACC,CAAV,EAAaD,CAAC,CAACE,CAAf,EAAkBM,MAAlB,CAAyBF,MAAzB,CAAd;AACA,MAAIG,mBAAmB,GAAGL,MAAM,CAACM,IAAP,CAAYC,KAAZ,CAAkBP,MAAlB,EAA0BG,OAA1B,CAA1B;AACA,MAAIK,KAAK,GAAG,IAAIH,mBAAJ,EAAZ;AACA,MAAII,IAAI,GAAGP,MAAM,CAACQ,KAAP,CAAa,CAAC,CAAd,CAAX;AACAd,EAAAA,CAAC,GAAG;AAAEC,IAAAA,CAAC,EAAGY,IAAI,CAAC,CAAD,CAAV;AAAeX,IAAAA,CAAC,EAAEW,IAAI,CAAC,CAAD;AAAtB,GAAJ;AACA,SAAOD,KAAP;AACD;;AAED,SAASG,WAAT,CAAqBX,MAArB,EAA6BY,CAA7B,EAAgC;AAC9B,MAAIC,KAAK,GAAGnB,SAAS,CAACkB,CAAD,CAAT,CAAaE,KAAb,CAAmB,GAAnB,CAAZ;AAAA,MACEb,IADF;AAAA,MAEEc,OAAO,GAAG,IAAIC,MAAJ,CAAW,SAAX,EAAsB,EAAtB,CAFZ;AAAA,MAGEC,OAHF;AAAA,MAIEf,MAJF;AAAA,MAKEgB,QAAQ,GAAG,EALb;AAAA,MAMEC,IAAI,GAAG;AAAE,SAAK,CAAP;AAAU,SAAK,CAAf;AAAkB,SAAK,CAAvB;AAA0B,SAAK;AAA/B,GANT;;AAQA,SAAON,KAAK,CAACO,MAAb,EAAqB;AACnBnB,IAAAA,IAAI,GAAGY,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAe,CAAf,EAAkB,CAAlB,CAAP;;AACA,QAAIN,OAAO,CAACO,IAAR,CAAarB,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,MAAM,GAAGW,KAAK,CAACQ,MAAN,CAAa,CAAb,EAAgBF,IAAI,CAAClB,IAAD,CAApB,EAA4BsB,GAA5B,CAAgCC,UAAhC,CAAT;AACAP,MAAAA,OAAO,GAAGlB,UAAU,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,CAApB;AACA,UAAIe,OAAJ,EAAaC,QAAQ,CAACO,IAAT,CAAcR,OAAd;AACd;AACF;;AAED,SAAO,IAAIjB,MAAM,CAAC0B,UAAX,CAAsBR,QAAtB,CAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["var normalise = require(\"./normalise-svg.js\");\n\nvar M = { x: false, y: false };\n\nfunction makeBezier(Bezier, term, values) {\n  if (term === 'Z') return;\n  if (term === 'M') {\n    M = {x: values[0], y: values[1]};\n    return;\n  }\n  // ES7: new Bezier(M.x, M.y, ...values)\n  var cvalues = [false, M.x, M.y].concat(values);\n  var PreboundConstructor = Bezier.bind.apply(Bezier, cvalues)\n  var curve = new PreboundConstructor();\n  var last = values.slice(-2);\n  M = { x : last[0], y: last[1] };\n  return curve;\n}\n\nfunction convertPath(Bezier, d) {\n  var terms = normalise(d).split(\" \"),\n    term,\n    matcher = new RegExp(\"[MLCQZ]\", \"\"),\n    segment,\n    values,\n    segments = [],\n    ARGS = { \"C\": 6, \"Q\": 4, \"L\": 2, \"M\": 2};\n\n  while (terms.length) {\n    term = terms.splice(0,1)[0];\n    if (matcher.test(term)) {\n      values = terms.splice(0, ARGS[term]).map(parseFloat);\n      segment = makeBezier(Bezier, term, values);\n      if (segment) segments.push(segment);\n    }\n  }\n\n  return new Bezier.PolyBezier(segments);\n}\n\nmodule.exports = convertPath;\n"]},"metadata":{},"sourceType":"script"}