{"ast":null,"code":"import { binarytree } from \"d3-binarytree\";\nimport { quadtree } from \"d3-quadtree\";\nimport { octree } from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nfunction z(d) {\n  return d.z + d.vz;\n}\n\nexport default function (radius) {\n  var nodes,\n      nDim,\n      radii,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        zi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = (nDim === 1 ? binarytree(nodes, x) : nDim === 2 ? quadtree(nodes, x, y) : nDim === 3 ? octree(nodes, x, y, z) : null).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n\n        if (nDim > 1) {\n          yi = node.y + node.vy;\n        }\n\n        if (nDim > 2) {\n          zi = node.z + node.vz;\n        }\n\n        tree.visit(apply);\n      }\n    }\n\n    function apply(treeNode, arg1, arg2, arg3, arg4, arg5, arg6) {\n      var args = [arg1, arg2, arg3, arg4, arg5, arg6];\n      var x0 = args[0],\n          y0 = args[1],\n          z0 = args[2],\n          x1 = args[nDim],\n          y1 = args[nDim + 1],\n          z1 = args[nDim + 2];\n      var data = treeNode.data,\n          rj = treeNode.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = nDim > 1 ? yi - data.y - data.vy : 0,\n              z = nDim > 2 ? zi - data.z - data.vz : 0,\n              l = x * x + y * y + z * z;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (nDim > 1 && y === 0) y = jiggle(), l += y * y;\n            if (nDim > 2 && z === 0) z = jiggle(), l += z * z;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n\n            if (nDim > 1) {\n              node.vy += (y *= l) * r;\n            }\n\n            if (nDim > 2) {\n              node.vz += (z *= l) * r;\n            }\n\n            data.vx -= x * (r = 1 - r);\n\n            if (nDim > 1) {\n              data.vy -= y * r;\n            }\n\n            if (nDim > 2) {\n              data.vz -= z * r;\n            }\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || nDim > 1 && (y0 > yi + r || y1 < yi - r) || nDim > 2 && (z0 > zi + r || z1 < zi - r);\n    }\n  }\n\n  function prepare(treeNode) {\n    if (treeNode.data) return treeNode.r = radii[treeNode.data.index];\n\n    for (var i = treeNode.r = 0; i < Math.pow(2, nDim); ++i) {\n      if (treeNode[i] && treeNode[i].r > treeNode.r) {\n        treeNode.r = treeNode[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function (initNodes, numDimensions) {\n    nodes = initNodes;\n    nDim = numDimensions;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/node_modules/d3-force-3d/src/collide.js"],"names":["binarytree","quadtree","octree","constant","jiggle","x","d","vx","y","vy","z","vz","radius","nodes","nDim","radii","strength","iterations","force","i","n","length","tree","node","xi","yi","zi","ri","ri2","k","visitAfter","prepare","index","visit","apply","treeNode","arg1","arg2","arg3","arg4","arg5","arg6","args","x0","y0","z0","x1","y1","z1","data","rj","r","l","Math","sqrt","pow","initialize","Array","initNodes","numDimensions","_","arguments"],"mappings":"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","sourcesContent":["import {binarytree} from \"d3-binarytree\";\nimport {quadtree} from \"d3-quadtree\";\nimport {octree} from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nfunction z(d) {\n  return d.z + d.vz;\n}\n\nexport default function(radius) {\n  var nodes,\n      nDim,\n      radii,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        zi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree =\n          (nDim === 1 ? binarytree(nodes, x)\n          :(nDim === 2 ? quadtree(nodes, x, y)\n          :(nDim === 3 ? octree(nodes, x, y, z)\n          :null\n      ))).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        if (nDim > 1) { yi = node.y + node.vy; }\n        if (nDim > 2) { zi = node.z + node.vz; }\n        tree.visit(apply);\n      }\n    }\n\n    function apply(treeNode, arg1, arg2, arg3, arg4, arg5, arg6) {\n      var args = [arg1, arg2, arg3, arg4, arg5, arg6];\n      var x0 = args[0],\n          y0 = args[1],\n          z0 = args[2],\n          x1 = args[nDim],\n          y1 = args[nDim+1],\n          z1 = args[nDim+2];\n\n      var data = treeNode.data, rj = treeNode.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = (nDim > 1 ? yi - data.y - data.vy : 0),\n              z = (nDim > 2 ? zi - data.z - data.vz : 0),\n              l = x * x + y * y + z * z;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(), l += x * x;\n            if (nDim > 1 && y === 0) y = jiggle(), l += y * y;\n            if (nDim > 2 && z === 0) z = jiggle(), l += z * z;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            if (nDim > 1) { node.vy += (y *= l) * r; }\n            if (nDim > 2) { node.vz += (z *= l) * r; }\n\n            data.vx -= x * (r = 1 - r);\n            if (nDim > 1) { data.vy -= y * r; }\n            if (nDim > 2) { data.vz -= z * r; }\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r\n          || (nDim > 1 && (y0 > yi + r || y1 < yi - r))\n          || (nDim > 2 && (z0 > zi + r || z1 < zi - r));\n    }\n  }\n\n  function prepare(treeNode) {\n    if (treeNode.data) return treeNode.r = radii[treeNode.data.index];\n    for (var i = treeNode.r = 0; i < Math.pow(2, nDim); ++i) {\n      if (treeNode[i] && treeNode[i].r > treeNode.r) {\n        treeNode.r = treeNode[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(initNodes, numDimensions) {\n    nodes = initNodes;\n    nDim = numDimensions;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n"]},"metadata":{},"sourceType":"module"}