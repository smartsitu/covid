{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var utils = require(\"./utils.js\");\n  /**\n   * Poly Bezier\n   * @param {[type]} curves [description]\n   */\n\n\n  var PolyBezier = function (curves) {\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  };\n\n  PolyBezier.prototype = {\n    valueOf: function () {\n      return this.toString();\n    },\n    toString: function () {\n      return \"[\" + this.curves.map(function (curve) {\n        return utils.pointsToString(curve.points);\n      }).join(\", \") + \"]\";\n    },\n    addCurve: function (curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    },\n    length: function () {\n      return this.curves.map(function (v) {\n        return v.length();\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    },\n    curve: function (idx) {\n      return this.curves[idx];\n    },\n    bbox: function () {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n\n      for (var i = 1; i < c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n\n      return bbox;\n    },\n    offset: function (d) {\n      var offset = [];\n      this.curves.forEach(function (v) {\n        offset = offset.concat(v.offset(d));\n      });\n      return new PolyBezier(offset);\n    }\n  };\n  module.exports = PolyBezier;\n})();","map":{"version":3,"sources":["/Users/maclaptop/Documents/GitHub/ashokpandey.com/node_modules/bezier-js/lib/poly-bezier.js"],"names":["utils","require","PolyBezier","curves","_3d","prototype","valueOf","toString","map","curve","pointsToString","points","join","addCurve","push","length","v","reduce","a","b","idx","bbox","c","i","expandbox","offset","d","forEach","concat","module","exports"],"mappings":"AAAA,CAAC,YAAW;AACV;;AAEA,MAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;AAEA;;;;;;AAIA,MAAIC,UAAU,GAAG,UAASC,MAAT,EAAiB;AAChC,SAAKA,MAAL,GAAc,EAAd;AACA,SAAKC,GAAL,GAAW,KAAX;;AACA,QAAI,CAAC,CAACD,MAAN,EAAc;AACZ,WAAKA,MAAL,GAAcA,MAAd;AACA,WAAKC,GAAL,GAAW,KAAKD,MAAL,CAAY,CAAZ,EAAeC,GAA1B;AACD;AACF,GAPD;;AASAF,EAAAA,UAAU,CAACG,SAAX,GAAuB;AACrBC,IAAAA,OAAO,EAAE,YAAW;AAClB,aAAO,KAAKC,QAAL,EAAP;AACD,KAHoB;AAIrBA,IAAAA,QAAQ,EAAE,YAAW;AACnB,aACE,MACA,KAAKJ,MAAL,CACGK,GADH,CACO,UAASC,KAAT,EAAgB;AACnB,eAAOT,KAAK,CAACU,cAAN,CAAqBD,KAAK,CAACE,MAA3B,CAAP;AACD,OAHH,EAIGC,IAJH,CAIQ,IAJR,CADA,GAMA,GAPF;AASD,KAdoB;AAerBC,IAAAA,QAAQ,EAAE,UAASJ,KAAT,EAAgB;AACxB,WAAKN,MAAL,CAAYW,IAAZ,CAAiBL,KAAjB;AACA,WAAKL,GAAL,GAAW,KAAKA,GAAL,IAAYK,KAAK,CAACL,GAA7B;AACD,KAlBoB;AAmBrBW,IAAAA,MAAM,EAAE,YAAW;AACjB,aAAO,KAAKZ,MAAL,CACJK,GADI,CACA,UAASQ,CAAT,EAAY;AACf,eAAOA,CAAC,CAACD,MAAF,EAAP;AACD,OAHI,EAIJE,MAJI,CAIG,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACrB,eAAOD,CAAC,GAAGC,CAAX;AACD,OANI,CAAP;AAOD,KA3BoB;AA4BrBV,IAAAA,KAAK,EAAE,UAASW,GAAT,EAAc;AACnB,aAAO,KAAKjB,MAAL,CAAYiB,GAAZ,CAAP;AACD,KA9BoB;AA+BrBC,IAAAA,IAAI,EAAE,YAAW;AACf,UAAIC,CAAC,GAAG,KAAKnB,MAAb;AACA,UAAIkB,IAAI,GAAGC,CAAC,CAAC,CAAD,CAAD,CAAKD,IAAL,EAAX;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAAC,CAACP,MAAtB,EAA8BQ,CAAC,EAA/B,EAAmC;AACjCvB,QAAAA,KAAK,CAACwB,SAAN,CAAgBH,IAAhB,EAAsBC,CAAC,CAACC,CAAD,CAAD,CAAKF,IAAL,EAAtB;AACD;;AACD,aAAOA,IAAP;AACD,KAtCoB;AAuCrBI,IAAAA,MAAM,EAAE,UAASC,CAAT,EAAY;AAClB,UAAID,MAAM,GAAG,EAAb;AACA,WAAKtB,MAAL,CAAYwB,OAAZ,CAAoB,UAASX,CAAT,EAAY;AAC9BS,QAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAcZ,CAAC,CAACS,MAAF,CAASC,CAAT,CAAd,CAAT;AACD,OAFD;AAGA,aAAO,IAAIxB,UAAJ,CAAeuB,MAAf,CAAP;AACD;AA7CoB,GAAvB;AAgDAI,EAAAA,MAAM,CAACC,OAAP,GAAiB5B,UAAjB;AACD,CAnED","sourcesContent":["(function() {\n  \"use strict\";\n\n  var utils = require(\"./utils.js\");\n\n  /**\n   * Poly Bezier\n   * @param {[type]} curves [description]\n   */\n  var PolyBezier = function(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  };\n\n  PolyBezier.prototype = {\n    valueOf: function() {\n      return this.toString();\n    },\n    toString: function() {\n      return (\n        \"[\" +\n        this.curves\n          .map(function(curve) {\n            return utils.pointsToString(curve.points);\n          })\n          .join(\", \") +\n        \"]\"\n      );\n    },\n    addCurve: function(curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    },\n    length: function() {\n      return this.curves\n        .map(function(v) {\n          return v.length();\n        })\n        .reduce(function(a, b) {\n          return a + b;\n        });\n    },\n    curve: function(idx) {\n      return this.curves[idx];\n    },\n    bbox: function() {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n      for (var i = 1; i < c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n      return bbox;\n    },\n    offset: function(d) {\n      var offset = [];\n      this.curves.forEach(function(v) {\n        offset = offset.concat(v.offset(d));\n      });\n      return new PolyBezier(offset);\n    }\n  };\n\n  module.exports = PolyBezier;\n})();\n"]},"metadata":{},"sourceType":"script"}